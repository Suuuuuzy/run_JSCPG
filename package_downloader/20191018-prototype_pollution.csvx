mithril,2.0.1,"The function parseQueryString may allow a malicious user to modify the prototype of Object, causing the addition or modification of an existing property that will exist on all objects. A payload such as __proto__%5BtoString%5D=123 in the query string would change the toString() function to 123.",https://www.npmjs.com/advisories/1094
handlebars,4.2.2,"Versions of handlebars prior to are vulnerable to Prototype Pollution leading to Remote Code Execution. Templates may alter an Objects' __proto__ and __defineGetter__ properties, which may allow an attacker to execute arbitrary code through crafted payloads.",https://www.npmjs.com/advisories/1164
lodash.mergewith,4.6.0, The function 'mergeWith' may allow a malicious user to modify the prototype of Object via __proto__ causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/1069
lodash.mergewith,4.6.1,Versions of lodash.mergewith before 4.6.2 are vulnerable to prototype pollution. The function mergeWith may allow a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/1071
lodash.defaultsdeep,4.6.0,"Description_1: The function 'defaultsDeep' may allow a malicious user to modify the prototype of Object via __proto__ causing the addition or modification of an existing property that will exist on all objects.
Description_2:The function mergeWith may allow a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.","https://www.npmjs.com/advisories/1070
https://www.npmjs.com/advisories/1068"
lodash.merge,4.6.0,Versions of lodash.merge before 4.6.1 are vulnerable to Prototype Pollution. The function 'merge' may allow a malicious user to modify the prototype of Object via __proto__ causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/1067
lodash.merge,4.6.1, The function merge may allow a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/1066
lodash ,4.17.11,The function defaultsDeep allows a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/1065
deeply,3.0.0,"The package fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.",https://www.npmjs.com/advisories/1030
assign-deep,1.0.0,"The assign function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.",https://www.npmjs.com/advisories/1014
mixin-deep,2.0.0,"The mixinDeep function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.",https://www.npmjs.com/advisories/1013
set-value,3.0.0,"The set function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.",https://www.npmjs.com/advisories/1012
extend,3.0.1,The extend() function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/996
mergify,1.0.3,The mergify() function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/995
@apollo/gateway,0.6.1,"The package uses deepMerge() to merge objects, which may allow attackers to alter the Object prototype through queries with GraphQL aliases. Carefully constructed payloads can override properties of all objects in the application. This may lead to Denial of Service or may be chained with other vulnerabilities leading to Remote Code Execution.",https://www.npmjs.com/advisories/91
lutils-merge,0.2.6,"The merge() function fails to prevent user input to alter an Object's prototype, allowing attackers to modify override properties of all objects in the application. This may lead to Denial of Service or may be chained with other vulnerabilities leading to Remote Code Execution.",https://www.npmjs.com/advisories/893
upmerge,0.1.8,"The merge() function fails to prevent user input to alter an Object's prototype, allowing attackers to modify override properties of all objects in the application. This may lead to Denial of Service or may be chained with other vulnerabilities leading to Remote Code Execution.",https://www.npmjs.com/advisories/809
smart-extend,1.7.4,The deep() function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.,https://www.npmjs.com/advisories/801
jquery,3.3.1,The extend() method allows an attacker to modify the prototype for Object causing changes in properties that will exist on all objects.,https://www.npmjs.com/advisories/796
lodash,4.17.10,"The vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of Object via {constructor: {prototype: {...}}} causing the addition or modification of an existing property that will exist on all objects.",https://www.npmjs.com/advisories/782
node.extend,2.0.0,Versions of node.extend before 1.1.7 or 2.0.1 are vulnerable to prototype pollution.,https://www.npmjs.com/advisories/781
just-extend,3.0.0,Provided certain input just-extend can add or modify properties of the Object prototype. These properties will be present on all objects.,https://www.npmjs.com/advisories/780
mpath,0.5.0,Provided certain input mpath can add or modify properties of the Object prototype. These properties will be present on all objects.,https://www.npmjs.com/advisories/779
defaults-deep,0.2.4, Provided certain input defaults-deep can add or modify properties of the Object prototype. These properties will be present on all objects.,https://www.npmjs.com/advisories/778
handlebars,3.0.7,"Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.",https://www.npmjs.com/advisories/755
cached-path-relative,1.0.1,Version of cached-path-relative before 1.0.2 are vulnerable to prototype pollution.,https://www.npmjs.com/advisories/739
merge,1.2.0,The merge.recursive function can be tricked into adding or modifying properties of the Object prototype.,https://www.npmjs.com/advisories/722
merge-options,1.0.0,All versions of merge-options are vulnerable to Prototype Pollution,https://www.npmjs.com/advisories/717
merge-objects,1.0.5,All versions of merge-objects are vulnerable to Prototype Pollution.,https://www.npmjs.com/advisories/716
merge-recursive,0.0.3,When malicious user input is merged with another object it allows the attacker to modify the prototype of Object via __proto__ causing the addition or modification of an existing property.,https://www.npmjs.com/advisories/715
deep-extend,0.5.0,Versions of deep-extend before 0.5.1 are vulnerable to prototype pollution.,https://www.npmjs.com/advisories/612
deap,1.0.0,Versions of deap before 1.0.1 are vulnerable to prototype pollution.,https://www.npmjs.com/advisories/611
defaults-deep,0.2.3,Versions of default-deep before 0.2.4 are vulnerable to prototype pollution,https://www.npmjs.com/advisories/581
merge-deep,3.0.0,Versions of merge-deep before 3.0.1 are vulnerable to prototype pollution via merging functions.,https://www.npmjs.com/advisories/580
assign-deep,0.4.6,Versions of assign-deep before 0.4.7 are vulnerable to prototype pollution via merging functions.,https://www.npmjs.com/advisories/579
mixin-deep,1.3.0,Versions of mixin-deep before 1.3.1 are vulnerable to prototype pollution via merging functions.,https://www.npmjs.com/advisories/578
lodash,4.17.4,"The vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of Object via __proto__ causing the addition or modification of an existing property that will exist on all objects.",https://www.npmjs.com/advisories/577
hoek,5.0.2,"The merge function, and the applyToDefaults and applyToDefaultsWithShallow functions which leverage merge behind the scenes, are vulnerable to a prototype pollution attack when provided an unvalidated payload created from a JSON string containing the __proto__ property.",https://www.npmjs.com/advisories/566
