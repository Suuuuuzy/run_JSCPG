id:ID	labels:label	type	flags:string[]	lineno:int	code	childnum:int	funcid:int	classname	namespace	endlineno:int	name	doccomment
0	Filesystem	File									/Users/jia/Desktop/tmp/EOPG/demos/FromDocToPdf/js/webtooltabAPI.js	
1	AST	AST_TOPLEVEL	TOPLEVEL_FILE	1						208	/Users/jia/Desktop/tmp/EOPG/demos/FromDocToPdf/js/webtooltabAPI.js	
2	Artificial	CFG_FUNC_ENTRY					1				/Users/jia/Desktop/tmp/EOPG/demos/FromDocToPdf/js/webtooltabAPI.js	
3	Artificial	CFG_FUNC_EXIT					1				/Users/jia/Desktop/tmp/EOPG/demos/FromDocToPdf/js/webtooltabAPI.js	
4	AST	AST_STMT_LIST		1		0	1			208		
5	AST	AST_ASSIGN		1	"webtooltab"	0	1			1		
6	AST	AST_VAR	JS_DECL_VAR	1		0	1			1		
7	AST	string		1	"webtooltab"	0	1			1	webtooltab	
8	AST	AST_CALL		2		1	1			208		
9	AST	AST_CLOSURE		2		0	1			208		
10	Artificial	CFG_FUNC_ENTRY					9					
11	Artificial	CFG_FUNC_EXIT					9					
12	AST	string		2	"{closure}"	0	9					
13	AST	NULL		2		1	9					
14	AST	AST_PARAM_LIST		2	"webtooltab"	2	9			208		
15	AST	AST_PARAM		2	"webtooltab"	0	9					
16	AST	NULL		2	"any"	0	9					
17	AST	string		2	"webtooltab"	1	9			2		
18	AST	NULL		2	"any"	2	9					
19	AST	NULL		2		3	9					
20	AST	AST_STMT_LIST		2		4	9			208		
21	AST	AST_ASSIGN		3	"config"	0	9			3		
22	AST	AST_VAR	JS_DECL_VAR	3		0	9			3		
23	AST	string		3	"config"	0	9			3	config	
24	AST	AST_FUNC_DECL		4	"getAPI"	1	9			29		
25	Artificial	CFG_FUNC_ENTRY					24					
26	Artificial	CFG_FUNC_EXIT					24					
27	AST	string		4	"getAPI"	0	24			4		
28	AST	NULL		4		1	24					
29	AST	AST_PARAM_LIST		4	"cfg"	2	24			29		
30	AST	AST_PARAM		4	"cfg"	0	24					
31	AST	NULL		4	"any"	0	24					
32	AST	string		4	"cfg"	1	24			4		
33	AST	NULL		4	"any"	2	24					
34	AST	AST_STMT_LIST		4		3	24			29		
35	AST	AST_ASSIGN		5	"config = cfg"	0	24			5		
36	AST	AST_VAR		5		0	24			5		
37	AST	string		5	"config"	0	24			5	config	
38	AST	AST_VAR		5		1	24			5		
39	AST	string		5	"cfg"	0	24			5	cfg	
40	AST	AST_ASSIGN		6	"api = {}"	1	24			6		
41	AST	AST_VAR	JS_DECL_VAR	6		0	24			6		
42	AST	string		6	"api"	0	24			6	api	
43	AST	AST_ARRAY	JS_OBJECT	6		1	24			6		
44	AST	AST_ASSIGN		7	"management = { disable: 'setEnabled', uninstall: 'uninstallSelf' }"	2	24			7		
45	AST	AST_VAR	JS_DECL_VAR	7		0	24			7		
46	AST	string		7	"management"	0	24			7	management	
47	AST	AST_ARRAY	JS_OBJECT	7		1	24			7		
48	AST	AST_ARRAY_ELEM		7		0	24			7		
49	AST	string		7	"setEnabled"	0	24			7		
50	AST	string		7	"disable"	1	24			7		
51	AST	AST_ARRAY_ELEM		7		1	24			7		
52	AST	string		7	"uninstallSelf"	0	24			7		
53	AST	string		7	"uninstall"	1	24			7		
54	AST	AST_ASSIGN		8	"api = Object.keys(management).reduce(function (obj, key) {            if (chrome.management[management[key]]) {                obj[key] = features.management[key];            }            return obj;        }, {})"	3	24			13		
55	AST	AST_VAR		8		0	24			8		
56	AST	string		8	"api"	0	24			8	api	
57	AST	AST_METHOD_CALL		8		1	24			13		
58	AST	AST_METHOD_CALL		8	"Object.keys(management)"	0	24			8		
59	AST	AST_VAR		8		0	24			8		
60	AST	string		8	"Object"	0	24			8	Object	
61	AST	string		8	"keys"	1	24			8		
62	AST	AST_ARG_LIST		8	"(management)"	2	24			8		
63	AST	AST_VAR		8		0	24			8		
64	AST	string		8	"management"	0	24			8	management	
65	AST	string		8	"reduce"	1	24			8		
66	AST	AST_ARG_LIST		8		2	24			13		
67	AST	AST_CLOSURE		8		0	24			13		
68	Artificial	CFG_FUNC_ENTRY					67					
69	Artificial	CFG_FUNC_EXIT					67					
70	AST	string		8	"{closure}"	0	67					
71	AST	NULL		8		1	67					
72	AST	AST_PARAM_LIST		8	"obj, key"	2	67			13		
73	AST	AST_PARAM		8	"obj"	0	67					
74	AST	NULL		8	"any"	0	67					
75	AST	string		8	"obj"	1	67			8		
76	AST	NULL		8	"any"	2	67					
77	AST	AST_PARAM		8	"key"	1	67					
78	AST	NULL		8	"any"	0	67					
79	AST	string		8	"key"	1	67			8		
80	AST	NULL		8	"any"	2	67					
81	AST	NULL		8		3	67					
82	AST	AST_STMT_LIST		8		4	67			13		
83	AST	AST_IF		9		0	67			11		
84	AST	AST_IF_ELEM		9		0	67			11		
85	AST	AST_DIM		9	"chrome.management[management[key]]"	0	67			9		
86	AST	AST_PROP		9	"chrome.management"	0	67			9		
87	AST	AST_VAR		9		0	67			9		
88	AST	string		9	"chrome"	0	67			9	chrome	
89	AST	string		9	"management"	1	67			9		
90	AST	AST_DIM		9	"management[key]"	1	67			9		
91	AST	AST_VAR		9		0	67			9		
92	AST	string		9	"management"	0	67			9	management	
93	AST	AST_VAR		9		1	67			9		
94	AST	string		9	"key"	0	67			9	key	
95	AST	AST_STMT_LIST		9		1	67			11		
96	AST	AST_ASSIGN		10	"obj[key] = features.management[key]"	0	67			10		
97	AST	AST_DIM		10	"obj[key]"	0	67			10		
98	AST	AST_VAR		10		0	67			10		
99	AST	string		10	"obj"	0	67			10	obj	
100	AST	AST_VAR		10		1	67			10		
101	AST	string		10	"key"	0	67			10	key	
102	AST	AST_DIM		10	"features.management[key]"	1	67			10		
103	AST	AST_PROP		10	"features.management"	0	67			10		
104	AST	AST_VAR		10		0	67			10		
105	AST	string		10	"features"	0	67			10	features	
106	AST	string		10	"management"	1	67			10		
107	AST	AST_VAR		10		1	67			10		
108	AST	string		10	"key"	0	67			10	key	
109	AST	AST_RETURN		12	"return obj;"	1	67			12		
110	AST	AST_VAR		12		0	67			12		
111	AST	string		12	"obj"	0	67			12	obj	
112	AST	NULL		8		5	67					
113	AST	NULL		8		6	67					
114	AST	AST_ARRAY	JS_OBJECT	13		1	24			13		
115	AST	AST_ASSIGN		14	"browsingData = {            history: 'history',            bookmarks: 'favoriteSites',            topSites: 'mostVisitedSites'        }"	4	24			18		
116	AST	AST_VAR	JS_DECL_VAR	14		0	24			14		
117	AST	string		14	"browsingData"	0	24			14	browsingData	
118	AST	AST_ARRAY	JS_OBJECT	14		1	24			18		
119	AST	AST_ARRAY_ELEM		15		0	24			15		
120	AST	string		15	"history"	0	24			15		
121	AST	string		15	"history"	1	24			15		
122	AST	AST_ARRAY_ELEM		16		1	24			16		
123	AST	string		16	"favoriteSites"	0	24			16		
124	AST	string		16	"bookmarks"	1	24			16		
125	AST	AST_ARRAY_ELEM		17		2	24			17		
126	AST	string		17	"mostVisitedSites"	0	24			17		
127	AST	string		17	"topSites"	1	24			17		
128	AST	AST_ASSIGN		19	"api = Object.keys(browsingData).reduce(function (obj, key) {            if (chrome[key]) {                obj[browsingData[key]] = features.browsingData[browsingData[key]];            }            return obj;        }, api)"	5	24			24		
129	AST	AST_VAR		19		0	24			19		
130	AST	string		19	"api"	0	24			19	api	
131	AST	AST_METHOD_CALL		19		1	24			24		
132	AST	AST_METHOD_CALL		19	"Object.keys(browsingData)"	0	24			19		
133	AST	AST_VAR		19		0	24			19		
134	AST	string		19	"Object"	0	24			19	Object	
135	AST	string		19	"keys"	1	24			19		
136	AST	AST_ARG_LIST		19	"(browsingData)"	2	24			19		
137	AST	AST_VAR		19		0	24			19		
138	AST	string		19	"browsingData"	0	24			19	browsingData	
139	AST	string		19	"reduce"	1	24			19		
140	AST	AST_ARG_LIST		19		2	24			24		
141	AST	AST_CLOSURE		19		0	24			24		
142	Artificial	CFG_FUNC_ENTRY					141					
143	Artificial	CFG_FUNC_EXIT					141					
144	AST	string		19	"{closure}"	0	141					
145	AST	NULL		19		1	141					
146	AST	AST_PARAM_LIST		19	"obj, key"	2	141			24		
147	AST	AST_PARAM		19	"obj"	0	141					
148	AST	NULL		19	"any"	0	141					
149	AST	string		19	"obj"	1	141			19		
150	AST	NULL		19	"any"	2	141					
151	AST	AST_PARAM		19	"key"	1	141					
152	AST	NULL		19	"any"	0	141					
153	AST	string		19	"key"	1	141			19		
154	AST	NULL		19	"any"	2	141					
155	AST	NULL		19		3	141					
156	AST	AST_STMT_LIST		19		4	141			24		
157	AST	AST_IF		20		0	141			22		
158	AST	AST_IF_ELEM		20		0	141			22		
159	AST	AST_DIM		20	"chrome[key]"	0	141			20		
160	AST	AST_VAR		20		0	141			20		
161	AST	string		20	"chrome"	0	141			20	chrome	
162	AST	AST_VAR		20		1	141			20		
163	AST	string		20	"key"	0	141			20	key	
164	AST	AST_STMT_LIST		20		1	141			22		
165	AST	AST_ASSIGN		21	"obj[browsingData[key]] = features.browsingData[browsingData[key]]"	0	141			21		
166	AST	AST_DIM		21	"obj[browsingData[key]]"	0	141			21		
167	AST	AST_VAR		21		0	141			21		
168	AST	string		21	"obj"	0	141			21	obj	
169	AST	AST_DIM		21	"browsingData[key]"	1	141			21		
170	AST	AST_VAR		21		0	141			21		
171	AST	string		21	"browsingData"	0	141			21	browsingData	
172	AST	AST_VAR		21		1	141			21		
173	AST	string		21	"key"	0	141			21	key	
174	AST	AST_DIM		21	"features.browsingData[browsingData[key]]"	1	141			21		
175	AST	AST_PROP		21	"features.browsingData"	0	141			21		
176	AST	AST_VAR		21		0	141			21		
177	AST	string		21	"features"	0	141			21	features	
178	AST	string		21	"browsingData"	1	141			21		
179	AST	AST_DIM		21	"browsingData[key]"	1	141			21		
180	AST	AST_VAR		21		0	141			21		
181	AST	string		21	"browsingData"	0	141			21	browsingData	
182	AST	AST_VAR		21		1	141			21		
183	AST	string		21	"key"	0	141			21	key	
184	AST	AST_RETURN		23	"return obj;"	1	141			23		
185	AST	AST_VAR		23		0	141			23		
186	AST	string		23	"obj"	0	141			23	obj	
187	AST	NULL		19		5	141					
188	AST	NULL		19		6	141					
189	AST	AST_VAR		24		1	24			24		
190	AST	string		24	"api"	0	24			24	api	
191	AST	AST_IF		25		6	24			27		
192	AST	AST_IF_ELEM		25		0	24			27		
193	AST	AST_BINARY_OP	BINARY_BOOL_AND	25	"config.executablePackages && config.executablePackages.length"	0	24			25		
194	AST	AST_PROP		25	"config.executablePackages"	0	24			25		
195	AST	AST_VAR		25		0	24			25		
196	AST	string		25	"config"	0	24			25	config	
197	AST	string		25	"executablePackages"	1	24			25		
198	AST	AST_PROP		25	"config.executablePackages.length"	1	24			25		
199	AST	AST_PROP		25	"config.executablePackages"	0	24			25		
200	AST	AST_VAR		25		0	24			25		
201	AST	string		25	"config"	0	24			25	config	
202	AST	string		25	"executablePackages"	1	24			25		
203	AST	string		25	"length"	1	24			25		
204	AST	AST_STMT_LIST		25		1	24			27		
205	AST	AST_ASSIGN		26	"api['CSW'] = features.CSW"	0	24			26		
206	AST	AST_DIM		26	"api['CSW']"	0	24			26		
207	AST	AST_VAR		26		0	24			26		
208	AST	string		26	"api"	0	24			26	api	
209	AST	string		26	"CSW"	1	24			26		
210	AST	AST_PROP		26	"features.CSW"	1	24			26		
211	AST	AST_VAR		26		0	24			26		
212	AST	string		26	"features"	0	24			26	features	
213	AST	string		26	"CSW"	1	24			26		
214	AST	AST_RETURN		28	"return api;"	7	24			28		
215	AST	AST_VAR		28		0	24			28		
216	AST	string		28	"api"	0	24			28	api	
217	AST	NULL		4		4	24					
218	AST	NULL		4		5	24					
219	AST	AST_ASSIGN		30	"webtooltab.getAPI = getAPI"	2	9			30		
220	AST	AST_PROP		30	"webtooltab.getAPI"	0	9			30		
221	AST	AST_VAR		30		0	9			30		
222	AST	string		30	"webtooltab"	0	9			30	webtooltab	
223	AST	string		30	"getAPI"	1	9			30		
224	AST	AST_VAR		30		1	9			30		
225	AST	string		30	"getAPI"	0	9			30	getAPI	
226	AST	AST_FUNC_DECL		31	"is64Bit"	3	9			33		
227	Artificial	CFG_FUNC_ENTRY					226					
228	Artificial	CFG_FUNC_EXIT					226					
229	AST	string		31	"is64Bit"	0	226			31		
230	AST	NULL		31		1	226					
231	AST	AST_PARAM_LIST		31		2	226			33		
232	AST	AST_STMT_LIST		31		3	226			33		
233	AST	AST_RETURN		32	"return window.navigator.appVersion.indexOf('WOW64') > -1;"	0	226			32		
234	AST	AST_BINARY_OP		32	"window.navigator.appVersion.indexOf('WOW64') > -1"	0	226			32		
235	AST	AST_METHOD_CALL		32	"window.navigator.appVersion.indexOf('WOW64')"	0	226			32		
236	AST	AST_PROP		32	"window.navigator.appVersion"	0	226			32		
237	AST	AST_PROP		32	"window.navigator"	0	226			32		
238	AST	AST_VAR		32		0	226			32		
239	AST	string		32	"window"	0	226			32	window	
240	AST	string		32	"navigator"	1	226			32		
241	AST	string		32	"appVersion"	1	226			32		
242	AST	string		32	"indexOf"	1	226			32		
243	AST	AST_ARG_LIST		32	"('WOW64')"	2	226			32		
244	AST	string		32	"WOW64"	0	226			32		
245	AST	AST_UNARY_OP	UNARY_MINUS	32	"-1"	1	226			32		
246	AST	integer		32	"1"	0	226			32		
247	AST	NULL		31		4	226					
248	AST	NULL		31		5	226					
249	AST	AST_FUNC_DECL		34	"findExecutable"	4	9			52		
250	Artificial	CFG_FUNC_ENTRY					249					
251	Artificial	CFG_FUNC_EXIT					249					
252	AST	string		34	"findExecutable"	0	249			34		
253	AST	NULL		34		1	249					
254	AST	AST_PARAM_LIST		34	"widgets, widgetId, executableName"	2	249			52		
255	AST	AST_PARAM		34	"widgets"	0	249					
256	AST	NULL		34	"any"	0	249					
257	AST	string		34	"widgets"	1	249			34		
258	AST	NULL		34	"any"	2	249					
259	AST	AST_PARAM		34	"widgetId"	1	249					
260	AST	NULL		34	"any"	0	249					
261	AST	string		34	"widgetId"	1	249			34		
262	AST	NULL		34	"any"	2	249					
263	AST	AST_PARAM		34	"executableName"	2	249					
264	AST	NULL		34	"any"	0	249					
265	AST	string		34	"executableName"	1	249			34		
266	AST	NULL		34	"any"	2	249					
267	AST	AST_STMT_LIST		34		3	249			52		
268	AST	AST_ASSIGN		35	"w = widgets.find(function (w) {            return w.id == widgetId;        })"	0	249			37		
269	AST	AST_VAR	JS_DECL_VAR	35		0	249			35		
270	AST	string		35	"w"	0	249			35	w	
271	AST	AST_METHOD_CALL		35	"widgets.find(function (w) {            return w.id == widgetId;        })"	1	249			37		
272	AST	AST_VAR		35		0	249			35		
273	AST	string		35	"widgets"	0	249			35	widgets	
274	AST	string		35	"find"	1	249			35		
275	AST	AST_ARG_LIST		35		2	249			37		
276	AST	AST_CLOSURE		35		0	249			37		
277	Artificial	CFG_FUNC_ENTRY					276					
278	Artificial	CFG_FUNC_EXIT					276					
279	AST	string		35	"{closure}"	0	276					
280	AST	NULL		35		1	276					
281	AST	AST_PARAM_LIST		35	"w"	2	276			37		
282	AST	AST_PARAM		35	"w"	0	276					
283	AST	NULL		35	"any"	0	276					
284	AST	string		35	"w"	1	276			35		
285	AST	NULL		35	"any"	2	276					
286	AST	NULL		35		3	276					
287	AST	AST_STMT_LIST		35		4	276			37		
288	AST	AST_RETURN		36	"return w.id == widgetId;"	0	276			36		
289	AST	AST_BINARY_OP	BINARY_IS_EQUAL	36	"w.id == widgetId"	0	276			36		
290	AST	AST_PROP		36	"w.id"	0	276			36		
291	AST	AST_VAR		36		0	276			36		
292	AST	string		36	"w"	0	276			36	w	
293	AST	string		36	"id"	1	276			36		
294	AST	AST_VAR		36		1	276			36		
295	AST	string		36	"widgetId"	0	276			36	widgetId	
296	AST	NULL		35		5	276					
297	AST	NULL		35		6	276					
298	AST	AST_IF		38		1	249			50		
299	AST	AST_IF_ELEM		38		0	249			50		
300	AST	AST_BINARY_OP	BINARY_BOOL_AND	38	"w && w.executables"	0	249			38		
301	AST	AST_VAR		38		0	249			38		
302	AST	string		38	"w"	0	249			38	w	
303	AST	AST_PROP		38	"w.executables"	1	249			38		
304	AST	AST_VAR		38		0	249			38		
305	AST	string		38	"w"	0	249			38	w	
306	AST	string		38	"executables"	1	249			38		
307	AST	AST_STMT_LIST		38		1	249			50		
308	AST	AST_ASSIGN		39	"executable_1 = w.executables[executableName]"	0	249			39		
309	AST	AST_VAR	JS_DECL_VAR	39		0	249			39		
310	AST	string		39	"executable_1"	0	249			39	executable_1	
311	AST	AST_DIM		39	"w.executables[executableName]"	1	249			39		
312	AST	AST_PROP		39	"w.executables"	0	249			39		
313	AST	AST_VAR		39		0	249			39		
314	AST	string		39	"w"	0	249			39	w	
315	AST	string		39	"executables"	1	249			39		
316	AST	AST_VAR		39		1	249			39		
317	AST	string		39	"executableName"	0	249			39	executableName	
318	AST	AST_IF		40		1	249			49		
319	AST	AST_IF_ELEM		40		0	249			49		
320	AST	AST_VAR		40		0	249			40		
321	AST	string		40	"executable_1"	0	249			40	executable_1	
322	AST	AST_STMT_LIST		40		1	249			49		
323	AST	AST_ASSIGN		41	"package_1 = config.executablePackages.find(function (p) {                    return p.name === executable_1.name;                })"	0	249			43		
324	AST	AST_VAR	JS_DECL_VAR	41		0	249			41		
325	AST	string		41	"package_1"	0	249			41	package_1	
326	AST	AST_METHOD_CALL		41		1	249			43		
327	AST	AST_PROP		41	"config.executablePackages"	0	249			41		
328	AST	AST_VAR		41		0	249			41		
329	AST	string		41	"config"	0	249			41	config	
330	AST	string		41	"executablePackages"	1	249			41		
331	AST	string		41	"find"	1	249			41		
332	AST	AST_ARG_LIST		41		2	249			43		
333	AST	AST_CLOSURE		41		0	249			43		
334	Artificial	CFG_FUNC_ENTRY					333					
335	Artificial	CFG_FUNC_EXIT					333					
336	AST	string		41	"{closure}"	0	333					
337	AST	NULL		41		1	333					
338	AST	AST_PARAM_LIST		41	"p"	2	333			43		
339	AST	AST_PARAM		41	"p"	0	333					
340	AST	NULL		41	"any"	0	333					
341	AST	string		41	"p"	1	333			41		
342	AST	NULL		41	"any"	2	333					
343	AST	NULL		41		3	333					
344	AST	AST_STMT_LIST		41		4	333			43		
345	AST	AST_RETURN		42	"return p.name === executable_1.name;"	0	333			42		
346	AST	AST_BINARY_OP	BINARY_IS_IDENTICAL	42	"p.name === executable_1.name"	0	333			42		
347	AST	AST_PROP		42	"p.name"	0	333			42		
348	AST	AST_VAR		42		0	333			42		
349	AST	string		42	"p"	0	333			42	p	
350	AST	string		42	"name"	1	333			42		
351	AST	AST_PROP		42	"executable_1.name"	1	333			42		
352	AST	AST_VAR		42		0	333			42		
353	AST	string		42	"executable_1"	0	333			42	executable_1	
354	AST	string		42	"name"	1	333			42		
355	AST	NULL		41		5	333					
356	AST	NULL		41		6	333					
357	AST	AST_IF		44		1	249			46		
358	AST	AST_IF_ELEM		44		0	249			46		
359	AST	AST_VAR		44		0	249			44		
360	AST	string		44	"package_1"	0	249			44	package_1	
361	AST	AST_STMT_LIST		44		1	249			46		
362	AST	AST_ASSIGN		45	"executable_1.installURL = getInstallURL(package_1)"	0	249			45		
363	AST	AST_PROP		45	"executable_1.installURL"	0	249			45		
364	AST	AST_VAR		45		0	249			45		
365	AST	string		45	"executable_1"	0	249			45	executable_1	
366	AST	string		45	"installURL"	1	249			45		
367	AST	AST_CALL		45	"getInstallURL(package_1)"	1	249			45		
368	AST	AST_NAME	NAME_NOT_FQ	45		0	249			45		
369	AST	string		45	"getInstallURL"	0	249			45		
370	AST	AST_ARG_LIST		45	"(package_1)"	1	249			45		
371	AST	AST_VAR		45		0	249			45		
372	AST	string		45	"package_1"	0	249			45	package_1	
373	AST	AST_ASSIGN		47	"executable_1.widget = w"	2	249			47		
374	AST	AST_PROP		47	"executable_1.widget"	0	249			47		
375	AST	AST_VAR		47		0	249			47		
376	AST	string		47	"executable_1"	0	249			47	executable_1	
377	AST	string		47	"widget"	1	249			47		
378	AST	AST_VAR		47		1	249			47		
379	AST	string		47	"w"	0	249			47	w	
380	AST	AST_RETURN		48	"return executable_1;"	3	249			48		
381	AST	AST_VAR		48		0	249			48		
382	AST	string		48	"executable_1"	0	249			48	executable_1	
383	AST	AST_RETURN		51	"return null;"	2	249			51		
384	AST	AST_CONST		51	"null"	0	249					
385	AST	AST_NAME	NAME_NOT_FQ	51	"null"	0	249					
386	AST	string		51	"null"	0	249					
387	AST	NULL		34		4	249					
388	AST	NULL		34		5	249					
389	AST	AST_FUNC_DECL		53	"getInstallURL"	5	9			59		
390	Artificial	CFG_FUNC_ENTRY					389					
391	Artificial	CFG_FUNC_EXIT					389					
392	AST	string		53	"getInstallURL"	0	389			53		
393	AST	NULL		53		1	389					
394	AST	AST_PARAM_LIST		53	"package_1"	2	389			59		
395	AST	AST_PARAM		53	"package_1"	0	389					
396	AST	NULL		53	"any"	0	389					
397	AST	string		53	"package_1"	1	389			53		
398	AST	NULL		53	"any"	2	389					
399	AST	AST_STMT_LIST		53		3	389			59		
400	AST	AST_ASSIGN		54	"host = String(config.csw.nativemessagingHostName).split('.').pop()"	0	389			54		
401	AST	AST_VAR	JS_DECL_VAR	54		0	389			54		
402	AST	string		54	"host"	0	389			54	host	
403	AST	AST_METHOD_CALL		54	"String(config.csw.nativemessagingHostName).split('.').pop()"	1	389			54		
404	AST	AST_METHOD_CALL		54	"String(config.csw.nativemessagingHostName).split('.')"	0	389			54		
405	AST	AST_CALL		54	"String(config.csw.nativemessagingHostName)"	0	389			54		
406	AST	AST_NAME	NAME_NOT_FQ	54		0	389			54		
407	AST	string		54	"String"	0	389			54		
408	AST	AST_ARG_LIST		54	"(config.csw.nativemessagingHostName)"	1	389			54		
409	AST	AST_PROP		54	"config.csw.nativemessagingHostName"	0	389			54		
410	AST	AST_PROP		54	"config.csw"	0	389			54		
411	AST	AST_VAR		54		0	389			54		
412	AST	string		54	"config"	0	389			54	config	
413	AST	string		54	"csw"	1	389			54		
414	AST	string		54	"nativemessagingHostName"	1	389			54		
415	AST	string		54	"split"	1	389			54		
416	AST	AST_ARG_LIST		54	"('.')"	2	389			54		
417	AST	string		54	"."	0	389			54		
418	AST	string		54	"pop"	1	389			54		
419	AST	AST_ARG_LIST		54	"()"	2	389			54		
420	AST	AST_ASSIGN		55	"c = is64Bit() ? package_1.configuration64Bit : package_1.configuration32Bit"	1	389			55		
421	AST	AST_VAR	JS_DECL_VAR	55		0	389			55		
422	AST	string		55	"c"	0	389			55	c	
423	AST	AST_CONDITIONAL		55	"is64Bit() ? package_1.configuration64Bit : package_1.configuration32Bit"	1	389			55		
424	AST	AST_CALL		55	"is64Bit()"	0	389			55		
425	AST	AST_NAME	NAME_NOT_FQ	55		0	389			55		
426	AST	string		55	"is64Bit"	0	389			55		
427	AST	AST_ARG_LIST		55	"()"	1	389			55		
428	AST	AST_PROP		55	"package_1.configuration64Bit"	1	389			55		
429	AST	AST_VAR		55		0	389			55		
430	AST	string		55	"package_1"	0	389			55	package_1	
431	AST	string		55	"configuration64Bit"	1	389			55		
432	AST	AST_PROP		55	"package_1.configuration32Bit"	2	389			55		
433	AST	AST_VAR		55		0	389			55		
434	AST	string		55	"package_1"	0	389			55	package_1	
435	AST	string		55	"configuration32Bit"	1	389			55		
436	AST	AST_RETURN		56	"return String(c.installerUri).replace(/\\/([^/]*)(\\.exe)/, function (m, name, ext) {            return \"/exepkg\" + name + \"/\" + name + \".\" + host + \".\" + chrome.runtime.id + \".ff\" + ext;        });"	2	389			58		
437	AST	AST_METHOD_CALL		56		0	389			58		
438	AST	AST_CALL		56	"String(c.installerUri)"	0	389			56		
439	AST	AST_NAME	NAME_NOT_FQ	56		0	389			56		
440	AST	string		56	"String"	0	389			56		
441	AST	AST_ARG_LIST		56	"(c.installerUri)"	1	389			56		
442	AST	AST_PROP		56	"c.installerUri"	0	389			56		
443	AST	AST_VAR		56		0	389			56		
444	AST	string		56	"c"	0	389			56	c	
445	AST	string		56	"installerUri"	1	389			56		
446	AST	string		56	"replace"	1	389			56		
447	AST	AST_ARG_LIST		56		2	389			58		
448	AST	string	JS_REGEXP	56	"/\\/([^/]*)(\\.exe)/"	0	389			56		
449	AST	AST_CLOSURE		56		1	389			58		
450	Artificial	CFG_FUNC_ENTRY					449					
451	Artificial	CFG_FUNC_EXIT					449					
452	AST	string		56	"{closure}"	0	449					
453	AST	NULL		56		1	449					
454	AST	AST_PARAM_LIST		56	"m, name, ext"	2	449			58		
455	AST	AST_PARAM		56	"m"	0	449					
456	AST	NULL		56	"any"	0	449					
457	AST	string		56	"m"	1	449			56		
458	AST	NULL		56	"any"	2	449					
459	AST	AST_PARAM		56	"name"	1	449					
460	AST	NULL		56	"any"	0	449					
461	AST	string		56	"name"	1	449			56		
462	AST	NULL		56	"any"	2	449					
463	AST	AST_PARAM		56	"ext"	2	449					
464	AST	NULL		56	"any"	0	449					
465	AST	string		56	"ext"	1	449			56		
466	AST	NULL		56	"any"	2	449					
467	AST	NULL		56		3	449					
468	AST	AST_STMT_LIST		56		4	449			58		
469	AST	AST_RETURN		57	"return \"/exepkg\" + name + \"/\" + name + \".\" + host + \".\" + chrome.runtime.id + \".ff\" + ext;"	0	449			57		
470	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name + \".\" + host + \".\" + chrome.runtime.id + \".ff\" + ext"	0	449			57		
471	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name + \".\" + host + \".\" + chrome.runtime.id + \".ff\""	0	449			57		
472	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name + \".\" + host + \".\" + chrome.runtime.id"	0	449			57		
473	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name + \".\" + host + \".\""	0	449			57		
474	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name + \".\" + host"	0	449			57		
475	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name + \".\""	0	449			57		
476	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\" + name"	0	449			57		
477	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name + \"/\""	0	449			57		
478	AST	AST_BINARY_OP	BINARY_ADD	57	"\"/exepkg\" + name"	0	449			57		
479	AST	string		57	"/exepkg"	0	449			57		
480	AST	AST_VAR		57		1	449			57		
481	AST	string		57	"name"	0	449			57	name	
482	AST	string		57	"/"	1	449			57		
483	AST	AST_VAR		57		1	449			57		
484	AST	string		57	"name"	0	449			57	name	
485	AST	string		57	"."	1	449			57		
486	AST	AST_VAR		57		1	449			57		
487	AST	string		57	"host"	0	449			57	host	
488	AST	string		57	"."	1	449			57		
489	AST	AST_PROP		57	"chrome.runtime.id"	1	449			57		
490	AST	AST_PROP		57	"chrome.runtime"	0	449			57		
491	AST	AST_VAR		57		0	449			57		
492	AST	string		57	"chrome"	0	449			57	chrome	
493	AST	string		57	"runtime"	1	449			57		
494	AST	string		57	"id"	1	449			57		
495	AST	string		57	".ff"	1	449			57		
496	AST	AST_VAR		57		1	449			57		
497	AST	string		57	"ext"	0	449			57	ext	
498	AST	NULL		56		5	449					
499	AST	NULL		56		6	449					
500	AST	NULL		53		4	389					
501	AST	NULL		53		5	389					
502	AST	AST_FUNC_DECL		60	"sendCswRequest"	6	9			88		
503	Artificial	CFG_FUNC_ENTRY					502					
504	Artificial	CFG_FUNC_EXIT					502					
505	AST	string		60	"sendCswRequest"	0	502			60		
506	AST	NULL		60		1	502					
507	AST	AST_PARAM_LIST		60	"request"	2	502			88		
508	AST	AST_PARAM		60	"request"	0	502					
509	AST	NULL		60	"any"	0	502					
510	AST	string		60	"request"	1	502			60		
511	AST	NULL		60	"any"	2	502					
512	AST	AST_STMT_LIST		60		3	502			88		
513	AST	AST_ASSIGN		61	"fn = chrome.runtime.sendNativeMessage"	0	502			61		
514	AST	AST_VAR	JS_DECL_VAR	61		0	502			61		
515	AST	string		61	"fn"	0	502			61	fn	
516	AST	AST_PROP		61	"chrome.runtime.sendNativeMessage"	1	502			61		
517	AST	AST_PROP		61	"chrome.runtime"	0	502			61		
518	AST	AST_VAR		61		0	502			61		
519	AST	string		61	"chrome"	0	502			61	chrome	
520	AST	string		61	"runtime"	1	502			61		
521	AST	string		61	"sendNativeMessage"	1	502			61		
522	AST	AST_RETURN		62	"return fn(config.csw.nativemessagingHostName, request).then(function (response) {            if (!response) {                response = {                    Service: request.Service,                    failureInfo: 'Unknown error',                    error: \"Unknown error while calling \\\"\" + request.Service + \"\\\"\",                    ReturnValue: \"\",                    RequestID: \"\"                };            }            else if (response.ErrorCode) {                if (!response.failureInfo) {                    response.failureInfo = response.ErrorCode;                }                response.error = response.failureInfo;            }            return response;        }).catch(function (err) {            return {                Service: request.Service,                failureInfo: 'Unknown error',                error: err.toString(),                ReturnValue: \"\",                RequestID: \"\"            };        });"	1	502			87		
523	AST	AST_METHOD_CALL		62		0	502			87		
524	AST	AST_METHOD_CALL		62		0	502			79		
525	AST	AST_CALL		62	"fn(config.csw.nativemessagingHostName, request)"	0	502			62		
526	AST	AST_NAME	NAME_NOT_FQ	62		0	502			62		
527	AST	string		62	"fn"	0	502			62		
528	AST	AST_ARG_LIST		62	"(config.csw.nativemessagingHostName, request)"	1	502			62		
529	AST	AST_PROP		62	"config.csw.nativemessagingHostName"	0	502			62		
530	AST	AST_PROP		62	"config.csw"	0	502			62		
531	AST	AST_VAR		62		0	502			62		
532	AST	string		62	"config"	0	502			62	config	
533	AST	string		62	"csw"	1	502			62		
534	AST	string		62	"nativemessagingHostName"	1	502			62		
535	AST	AST_VAR		62		1	502			62		
536	AST	string		62	"request"	0	502			62	request	
537	AST	string		62	"then"	1	502			62		
538	AST	AST_ARG_LIST		62		2	502			79		
539	AST	AST_CLOSURE		62		0	502			79		
540	Artificial	CFG_FUNC_ENTRY					539					
541	Artificial	CFG_FUNC_EXIT					539					
542	AST	string		62	"{closure}"	0	539					
543	AST	NULL		62		1	539					
544	AST	AST_PARAM_LIST		62	"response"	2	539			79		
545	AST	AST_PARAM		62	"response"	0	539					
546	AST	NULL		62	"any"	0	539					
547	AST	string		62	"response"	1	539			62		
548	AST	NULL		62	"any"	2	539					
549	AST	NULL		62		3	539					
550	AST	AST_STMT_LIST		62		4	539			79		
551	AST	AST_IF		63		0	539			77		
552	AST	AST_IF_ELEM		63		0	539			77		
553	AST	AST_UNARY_OP	UNARY_BOOL_NOT	63	"!response"	0	539			63		
554	AST	AST_VAR		63		0	539			63		
555	AST	string		63	"response"	0	539			63	response	
556	AST	AST_STMT_LIST		63		1	539			71		
557	AST	AST_ASSIGN		64	"response = {                    Service: request.Service,                    failureInfo: 'Unknown error',                    error: \"Unknown error while calling \\\"\" + request.Service + \"\\\"\",                    ReturnValue: \"\",                    RequestID: \"\"                }"	0	539			70		
558	AST	AST_VAR		64		0	539			64		
559	AST	string		64	"response"	0	539			64	response	
560	AST	AST_ARRAY	JS_OBJECT	64		1	539			70		
561	AST	AST_ARRAY_ELEM		65		0	539			65		
562	AST	AST_PROP		65	"request.Service"	0	539			65		
563	AST	AST_VAR		65		0	539			65		
564	AST	string		65	"request"	0	539			65	request	
565	AST	string		65	"Service"	1	539			65		
566	AST	string		65	"Service"	1	539			65		
567	AST	AST_ARRAY_ELEM		66		1	539			66		
568	AST	string		66	"Unknown error"	0	539			66		
569	AST	string		66	"failureInfo"	1	539			66		
570	AST	AST_ARRAY_ELEM		67		2	539			67		
571	AST	AST_BINARY_OP	BINARY_ADD	67	"\"Unknown error while calling \\\"\" + request.Service + \"\\\"\""	0	539			67		
572	AST	AST_BINARY_OP	BINARY_ADD	67	"\"Unknown error while calling \\\"\" + request.Service"	0	539			67		
573	AST	string		67	"Unknown error while calling \\\""	0	539			67		
574	AST	AST_PROP		67	"request.Service"	1	539			67		
575	AST	AST_VAR		67		0	539			67		
576	AST	string		67	"request"	0	539			67	request	
577	AST	string		67	"Service"	1	539			67		
578	AST	string		67	"\\\""	1	539			67		
579	AST	string		67	"error"	1	539			67		
580	AST	AST_ARRAY_ELEM		68		3	539			68		
581	AST	string		68		0	539			68		
582	AST	string		68	"ReturnValue"	1	539			68		
583	AST	AST_ARRAY_ELEM		69		4	539			69		
584	AST	string		69		0	539			69		
585	AST	string		69	"RequestID"	1	539			69		
586	AST	AST_IF_ELEM		63		1	539			77		
587	AST	NULL		63		0	539					
588	AST	AST_STMT_LIST		72		1	539			77		
589	AST	AST_IF		72		0	539			77		
590	AST	AST_IF_ELEM		72		0	539			77		
591	AST	AST_PROP		72	"response.ErrorCode"	0	539			72		
592	AST	AST_VAR		72		0	539			72		
593	AST	string		72	"response"	0	539			72	response	
594	AST	string		72	"ErrorCode"	1	539			72		
595	AST	AST_STMT_LIST		72		1	539			77		
596	AST	AST_IF		73		0	539			75		
597	AST	AST_IF_ELEM		73		0	539			75		
598	AST	AST_UNARY_OP	UNARY_BOOL_NOT	73	"!response.failureInfo"	0	539			73		
599	AST	AST_PROP		73	"response.failureInfo"	0	539			73		
600	AST	AST_VAR		73		0	539			73		
601	AST	string		73	"response"	0	539			73	response	
602	AST	string		73	"failureInfo"	1	539			73		
603	AST	AST_STMT_LIST		73		1	539			75		
604	AST	AST_ASSIGN		74	"response.failureInfo = response.ErrorCode"	0	539			74		
605	AST	AST_PROP		74	"response.failureInfo"	0	539			74		
606	AST	AST_VAR		74		0	539			74		
607	AST	string		74	"response"	0	539			74	response	
608	AST	string		74	"failureInfo"	1	539			74		
609	AST	AST_PROP		74	"response.ErrorCode"	1	539			74		
610	AST	AST_VAR		74		0	539			74		
611	AST	string		74	"response"	0	539			74	response	
612	AST	string		74	"ErrorCode"	1	539			74		
613	AST	AST_ASSIGN		76	"response.error = response.failureInfo"	1	539			76		
614	AST	AST_PROP		76	"response.error"	0	539			76		
615	AST	AST_VAR		76		0	539			76		
616	AST	string		76	"response"	0	539			76	response	
617	AST	string		76	"error"	1	539			76		
618	AST	AST_PROP		76	"response.failureInfo"	1	539			76		
619	AST	AST_VAR		76		0	539			76		
620	AST	string		76	"response"	0	539			76	response	
621	AST	string		76	"failureInfo"	1	539			76		
622	AST	AST_RETURN		78	"return response;"	1	539			78		
623	AST	AST_VAR		78		0	539			78		
624	AST	string		78	"response"	0	539			78	response	
625	AST	NULL		62		5	539					
626	AST	NULL		62		6	539					
627	AST	string		79	"catch"	1	502			79		
628	AST	AST_ARG_LIST		62		2	502			87		
629	AST	AST_CLOSURE		79		0	502			87		
630	Artificial	CFG_FUNC_ENTRY					629					
631	Artificial	CFG_FUNC_EXIT					629					
632	AST	string		79	"{closure}"	0	629					
633	AST	NULL		79		1	629					
634	AST	AST_PARAM_LIST		79	"err"	2	629			87		
635	AST	AST_PARAM		79	"err"	0	629					
636	AST	NULL		79	"any"	0	629					
637	AST	string		79	"err"	1	629			79		
638	AST	NULL		79	"any"	2	629					
639	AST	NULL		79		3	629					
640	AST	AST_STMT_LIST		79		4	629			87		
641	AST	AST_RETURN		80	"return {                Service: request.Service,                failureInfo: 'Unknown error',                error: err.toString(),                ReturnValue: \"\",                RequestID: \"\"            };"	0	629			86		
642	AST	AST_ARRAY	JS_OBJECT	80		0	629			86		
643	AST	AST_ARRAY_ELEM		81		0	629			81		
644	AST	AST_PROP		81	"request.Service"	0	629			81		
645	AST	AST_VAR		81		0	629			81		
646	AST	string		81	"request"	0	629			81	request	
647	AST	string		81	"Service"	1	629			81		
648	AST	string		81	"Service"	1	629			81		
649	AST	AST_ARRAY_ELEM		82		1	629			82		
650	AST	string		82	"Unknown error"	0	629			82		
651	AST	string		82	"failureInfo"	1	629			82		
652	AST	AST_ARRAY_ELEM		83		2	629			83		
653	AST	AST_METHOD_CALL		83	"err.toString()"	0	629			83		
654	AST	AST_VAR		83		0	629			83		
655	AST	string		83	"err"	0	629			83	err	
656	AST	string		83	"toString"	1	629			83		
657	AST	AST_ARG_LIST		83	"()"	2	629			83		
658	AST	string		83	"error"	1	629			83		
659	AST	AST_ARRAY_ELEM		84		3	629			84		
660	AST	string		84		0	629			84		
661	AST	string		84	"ReturnValue"	1	629			84		
662	AST	AST_ARRAY_ELEM		85		4	629			85		
663	AST	string		85		0	629			85		
664	AST	string		85	"RequestID"	1	629			85		
665	AST	NULL		79		5	629					
666	AST	NULL		79		6	629					
667	AST	NULL		60		4	502					
668	AST	NULL		60		5	502					
669	AST	AST_FUNC_DECL		89	"handleCswResponse"	7	9			95		
670	Artificial	CFG_FUNC_ENTRY					669					
671	Artificial	CFG_FUNC_EXIT					669					
672	AST	string		89	"handleCswResponse"	0	669			89		
673	AST	NULL		89		1	669					
674	AST	AST_PARAM_LIST		89	"response, request, exe"	2	669			95		
675	AST	AST_PARAM		89	"response"	0	669					
676	AST	NULL		89	"any"	0	669					
677	AST	string		89	"response"	1	669			89		
678	AST	NULL		89	"any"	2	669					
679	AST	AST_PARAM		89	"request"	1	669					
680	AST	NULL		89	"any"	0	669					
681	AST	string		89	"request"	1	669			89		
682	AST	NULL		89	"any"	2	669					
683	AST	AST_PARAM		89	"exe"	2	669					
684	AST	NULL		89	"any"	0	669					
685	AST	string		89	"exe"	1	669			89		
686	AST	NULL		89	"any"	2	669					
687	AST	AST_STMT_LIST		89		3	669			95		
688	AST	AST_ASSIGN		90	"error"	0	669			90		
689	AST	AST_VAR	JS_DECL_VAR	90		0	669			90		
690	AST	string		90	"error"	0	669			90	error	
691	AST	AST_IF		91		1	669			93		
692	AST	AST_IF_ELEM		91		0	669			93		
693	AST	AST_PROP		91	"response.error"	0	669			91		
694	AST	AST_VAR		91		0	669			91		
695	AST	string		91	"response"	0	669			91	response	
696	AST	string		91	"error"	1	669			91		
697	AST	AST_STMT_LIST		91		1	669			93		
698	AST	AST_ASSIGN		92	"error = { message: response.error, installURL: exe.installURL }"	0	669			92		
699	AST	AST_VAR		92		0	669			92		
700	AST	string		92	"error"	0	669			92	error	
701	AST	AST_ARRAY	JS_OBJECT	92		1	669			92		
702	AST	AST_ARRAY_ELEM		92		0	669			92		
703	AST	AST_PROP		92	"response.error"	0	669			92		
704	AST	AST_VAR		92		0	669			92		
705	AST	string		92	"response"	0	669			92	response	
706	AST	string		92	"error"	1	669			92		
707	AST	string		92	"message"	1	669			92		
708	AST	AST_ARRAY_ELEM		92		1	669			92		
709	AST	AST_PROP		92	"exe.installURL"	0	669			92		
710	AST	AST_VAR		92		0	669			92		
711	AST	string		92	"exe"	0	669			92	exe	
712	AST	string		92	"installURL"	1	669			92		
713	AST	string		92	"installURL"	1	669			92		
714	AST	AST_RETURN		94	"return Promise.resolve({ data: response, error: error });"	2	669			94		
715	AST	AST_METHOD_CALL		94	"Promise.resolve({ data: response, error: error })"	0	669			94		
716	AST	AST_VAR		94		0	669			94		
717	AST	string		94	"Promise"	0	669			94	Promise	
718	AST	string		94	"resolve"	1	669			94		
719	AST	AST_ARG_LIST		94	"({ data: response, error: error })"	2	669			94		
720	AST	AST_ARRAY	JS_OBJECT	94		0	669			94		
721	AST	AST_ARRAY_ELEM		94		0	669			94		
722	AST	AST_VAR		94		0	669			94		
723	AST	string		94	"response"	0	669			94	response	
724	AST	string		94	"data"	1	669			94		
725	AST	AST_ARRAY_ELEM		94		1	669			94		
726	AST	AST_VAR		94		0	669			94		
727	AST	string		94	"error"	0	669			94	error	
728	AST	string		94	"error"	1	669			94		
729	AST	NULL		89		4	669					
730	AST	NULL		89		5	669					
731	AST	AST_ASSIGN		96	"features = {        management: {            disable: function () {                return new Promise(function (resolve, reject) {                    var initiatedEventData = {                        state: \"initiated\"                    };                    ask.apps.ul.fireCEDisableEvent(config.buildVars.unifiedLoggingUrl, initiatedEventData, config).then(function () {                        try {                            var result = chrome.management.setEnabled(chrome.runtime.id, false);                            if (result) {                                return result.catch(reject);                            }                        }                        catch (ex) {                            var exceptionEventData = {                                state: \"exception\",                                message: ex.message                            };                            ask.apps.ul.fireCEDisableEvent(config.buildVars.unifiedLoggingUrl, exceptionEventData, config);                          "	8	9			207		
732	AST	AST_VAR	JS_DECL_VAR	96		0	9			96		
733	AST	string		96	"features"	0	9			96	features	
734	AST	AST_ARRAY	JS_OBJECT	96		1	9			207		
735	AST	AST_ARRAY_ELEM		97		0	9			145		
736	AST	AST_ARRAY	JS_OBJECT	97		0	9			145		
737	AST	AST_ARRAY_ELEM		98		0	9			120		
738	AST	AST_CLOSURE		98		0	9			120		
739	Artificial	CFG_FUNC_ENTRY					738					
740	Artificial	CFG_FUNC_EXIT					738					
741	AST	string		98	"{closure}"	0	738					
742	AST	NULL		98		1	738					
743	AST	AST_PARAM_LIST		98		2	738			120		
744	AST	NULL		98		3	738					
745	AST	AST_STMT_LIST		98		4	738			120		
746	AST	AST_RETURN		99	"return new Promise(function (resolve, reject) {                    var initiatedEventData = {                        state: \"initiated\"                    };                    ask.apps.ul.fireCEDisableEvent(config.buildVars.unifiedLoggingUrl, initiatedEventData, config).then(function () {                        try {                            var result = chrome.management.setEnabled(chrome.runtime.id, false);                            if (result) {                                return result.catch(reject);                            }                        }                        catch (ex) {                            var exceptionEventData = {                                state: \"exception\",                                message: ex.message                            };                            ask.apps.ul.fireCEDisableEvent(config.buildVars.unifiedLoggingUrl, exceptionEventData, config);                            return reject(ex);                        }                    });               "	0	738			119		
747	AST	AST_NEW		99		0	738			119		
748	AST	AST_NAME	NAME_NOT_FQ	99		0	738			119		
749	AST	string		99	"Promise"	0	738			99		
750	AST	AST_ARG_LIST		99		1	738			119		
751	AST	AST_CLOSURE		99		0	738			119		
752	Artificial	CFG_FUNC_ENTRY					751					
753	Artificial	CFG_FUNC_EXIT					751					
754	AST	string		99	"{closure}"	0	751					
755	AST	NULL		99		1	751					
756	AST	AST_PARAM_LIST		99	"resolve, reject"	2	751			119		
757	AST	AST_PARAM		99	"resolve"	0	751					
758	AST	NULL		99	"any"	0	751					
759	AST	string		99	"resolve"	1	751			99		
760	AST	NULL		99	"any"	2	751					
761	AST	AST_PARAM		99	"reject"	1	751					
762	AST	NULL		99	"any"	0	751					
763	AST	string		99	"reject"	1	751			99		
764	AST	NULL		99	"any"	2	751					
765	AST	NULL		99		3	751					
766	AST	AST_STMT_LIST		99		4	751			119		
767	AST	AST_ASSIGN		100	"initiatedEventData = {                        state: \"initiated\"                    }"	0	751			102		
768	AST	AST_VAR	JS_DECL_VAR	100		0	751			100		
769	AST	string		100	"initiatedEventData"	0	751			100	initiatedEventData	
770	AST	AST_ARRAY	JS_OBJECT	100		1	751			102		
771	AST	AST_ARRAY_ELEM		101		0	751			101		
772	AST	string		101	"initiated"	0	751			101		
773	AST	string		101	"state"	1	751			101		
774	AST	AST_METHOD_CALL		103		1	751			118		
775	AST	AST_METHOD_CALL		103	"ask.apps.ul.fireCEDisableEvent(config.buildVars.unifiedLoggingUrl, initiatedEventData, config)"	0	751			103		
776	AST	AST_PROP		103	"ask.apps.ul"	0	751			103		
777	AST	AST_PROP		103	"ask.apps"	0	751			103		
778	AST	AST_VAR		103		0	751			103		
779	AST	string		103	"ask"	0	751			103	ask	
780	AST	string		103	"apps"	1	751			103		
781	AST	string		103	"ul"	1	751			103		
782	AST	string		103	"fireCEDisableEvent"	1	751			103		
783	AST	AST_ARG_LIST		103	"(config.buildVars.unifiedLoggingUrl, initiatedEventData, config)"	2	751			103		
784	AST	AST_PROP		103	"config.buildVars.unifiedLoggingUrl"	0	751			103		
785	AST	AST_PROP		103	"config.buildVars"	0	751			103		
786	AST	AST_VAR		103		0	751			103		
787	AST	string		103	"config"	0	751			103	config	
788	AST	string		103	"buildVars"	1	751			103		
789	AST	string		103	"unifiedLoggingUrl"	1	751			103		
790	AST	AST_VAR		103		1	751			103		
791	AST	string		103	"initiatedEventData"	0	751			103	initiatedEventData	
792	AST	AST_VAR		103		2	751			103		
793	AST	string		103	"config"	0	751			103	config	
794	AST	string		103	"then"	1	751			103		
795	AST	AST_ARG_LIST		103		2	751			118		
796	AST	AST_CLOSURE		103		0	751			118		
797	Artificial	CFG_FUNC_ENTRY					796					
798	Artificial	CFG_FUNC_EXIT					796					
799	AST	string		103	"{closure}"	0	796					
800	AST	NULL		103		1	796					
801	AST	AST_PARAM_LIST		103		2	796			118		
802	AST	NULL		103		3	796					
803	AST	AST_STMT_LIST		103		4	796			118		
804	AST	AST_TRY		104		0	796			117		
805	AST	AST_STMT_LIST		104		0	796			109		
806	AST	AST_ASSIGN		105	"result = chrome.management.setEnabled(chrome.runtime.id, false)"	0	796			105		
807	AST	AST_VAR	JS_DECL_VAR	105		0	796			105		
808	AST	string		105	"result"	0	796			105	result	
809	AST	AST_METHOD_CALL		105	"chrome.management.setEnabled(chrome.runtime.id, false)"	1	796			105		
810	AST	AST_PROP		105	"chrome.management"	0	796			105		
811	AST	AST_VAR		105		0	796			105		
812	AST	string		105	"chrome"	0	796			105	chrome	
813	AST	string		105	"management"	1	796			105		
814	AST	string		105	"setEnabled"	1	796			105		
815	AST	AST_ARG_LIST		105	"(chrome.runtime.id, false)"	2	796			105		
816	AST	AST_PROP		105	"chrome.runtime.id"	0	796			105		
817	AST	AST_PROP		105	"chrome.runtime"	0	796			105		
818	AST	AST_VAR		105		0	796			105		
819	AST	string		105	"chrome"	0	796			105	chrome	
820	AST	string		105	"runtime"	1	796			105		
821	AST	string		105	"id"	1	796			105		
822	AST	AST_CONST		105	"false"	1	796					
823	AST	AST_NAME	NAME_NOT_FQ	105	"false"	0	796					
824	AST	string		105	"false"	0	796					
825	AST	AST_IF		106		1	796			108		
826	AST	AST_IF_ELEM		106		0	796			108		
827	AST	AST_VAR		106		0	796			106		
828	AST	string		106	"result"	0	796			106	result	
829	AST	AST_STMT_LIST		106		1	796			108		
830	AST	AST_RETURN		107	"return result.catch(reject);"	0	796			107		
831	AST	AST_METHOD_CALL		107	"result.catch(reject)"	0	796			107		
832	AST	AST_VAR		107		0	796			107		
833	AST	string		107	"result"	0	796			107	result	
834	AST	string		107	"catch"	1	796			107		
835	AST	AST_ARG_LIST		107	"(reject)"	2	796			107		
836	AST	AST_VAR		107		0	796			107		
837	AST	string		107	"reject"	0	796			107	reject	
838	AST	AST_CATCH_LIST		104		1	796			117		
839	AST	AST_CATCH		110		0	796			117		
840	AST	AST_NAME_LIST		110		0	796			117		
841	AST	AST_NAME	NAME_NOT_FQ	110		0	796			117		
842	AST	string		110	"Exception"	0	796			117		
843	AST	AST_VAR		110		1	796			110		
844	AST	string		110	"ex"	0	796			110	ex	
845	AST	AST_STMT_LIST		110		2	796			117		
846	AST	AST_ASSIGN		111	"exceptionEventData = {                                state: \"exception\",                                message: ex.message                            }"	0	796			114		
847	AST	AST_VAR	JS_DECL_VAR	111		0	796			111		
848	AST	string		111	"exceptionEventData"	0	796			111	exceptionEventData	
849	AST	AST_ARRAY	JS_OBJECT	111		1	796			114		
850	AST	AST_ARRAY_ELEM		112		0	796			112		
851	AST	string		112	"exception"	0	796			112		
852	AST	string		112	"state"	1	796			112		
853	AST	AST_ARRAY_ELEM		113		1	796			113		
854	AST	AST_PROP		113	"ex.message"	0	796			113		
855	AST	AST_VAR		113		0	796			113		
856	AST	string		113	"ex"	0	796			113	ex	
857	AST	string		113	"message"	1	796			113		
858	AST	string		113	"message"	1	796			113		
859	AST	AST_METHOD_CALL		115	"ask.apps.ul.fireCEDisableEvent(config.buildVars.unifiedLoggingUrl, exceptionEventData, config)"	1	796			115		
860	AST	AST_PROP		115	"ask.apps.ul"	0	796			115		
861	AST	AST_PROP		115	"ask.apps"	0	796			115		
862	AST	AST_VAR		115		0	796			115		
863	AST	string		115	"ask"	0	796			115	ask	
864	AST	string		115	"apps"	1	796			115		
865	AST	string		115	"ul"	1	796			115		
866	AST	string		115	"fireCEDisableEvent"	1	796			115		
867	AST	AST_ARG_LIST		115	"(config.buildVars.unifiedLoggingUrl, exceptionEventData, config)"	2	796			115		
868	AST	AST_PROP		115	"config.buildVars.unifiedLoggingUrl"	0	796			115		
869	AST	AST_PROP		115	"config.buildVars"	0	796			115		
870	AST	AST_VAR		115		0	796			115		
871	AST	string		115	"config"	0	796			115	config	
872	AST	string		115	"buildVars"	1	796			115		
873	AST	string		115	"unifiedLoggingUrl"	1	796			115		
874	AST	AST_VAR		115		1	796			115		
875	AST	string		115	"exceptionEventData"	0	796			115	exceptionEventData	
876	AST	AST_VAR		115		2	796			115		
877	AST	string		115	"config"	0	796			115	config	
878	AST	AST_RETURN		116	"return reject(ex);"	2	796			116		
879	AST	AST_CALL		116	"reject(ex)"	0	796			116		
880	AST	AST_NAME	NAME_NOT_FQ	116		0	796			116		
881	AST	string		116	"reject"	0	796			116		
882	AST	AST_ARG_LIST		116	"(ex)"	1	796			116		
883	AST	AST_VAR		116		0	796			116		
884	AST	string		116	"ex"	0	796			116	ex	
886	AST	NULL		103		5	796					
887	AST	NULL		103		6	796					
888	AST	NULL		99		5	751					
889	AST	NULL		99		6	751					
890	AST	NULL		98		5	738					
891	AST	NULL		98		6	738					
892	AST	string		98	"disable"	1	9			98		
893	AST	AST_ARRAY_ELEM		121		1	9			144		
894	AST	AST_CLOSURE		121		0	9			144		
895	Artificial	CFG_FUNC_ENTRY					894					
896	Artificial	CFG_FUNC_EXIT					894					
897	AST	string		121	"{closure}"	0	894					
898	AST	NULL		121		1	894					
899	AST	AST_PARAM_LIST		121	"options"	2	894			144		
900	AST	AST_PARAM		121	"options"	0	894					
901	AST	NULL		121	"any"	0	894					
902	AST	string		121	"options"	1	894			121		
903	AST	NULL		121	"any"	2	894					
904	AST	NULL		121		3	894					
905	AST	AST_STMT_LIST		121		4	894			144		
906	AST	AST_RETURN		122	"return new Promise(function (resolve, reject) {                    var initiatedEventData = {                        state: \"initiated\"                    };                    ask.apps.ul.fireCEUninstallEvent(config.buildVars.unifiedLoggingUrl, initiatedEventData, config);                    new Promise(function (resolve, reject) { return window.setTimeout(resolve, 50); }).then(function () {                        try {                            var result = chrome.management.uninstallSelf(options);                            if (result) {                                return result.catch(reject);                            }                        }                        catch (ex) {                            var exceptionEventData = {                                state: \"exception\",                                message: ex.message                            };                            ask.apps.ul.fireCEUninstallEvent(config.buildVars.unifiedLoggingUrl, exceptionEventData, config);                "	0	894			143		
907	AST	AST_NEW		122		0	894			143		
908	AST	AST_NAME	NAME_NOT_FQ	122		0	894			143		
909	AST	string		122	"Promise"	0	894			122		
910	AST	AST_ARG_LIST		122		1	894			143		
911	AST	AST_CLOSURE		122		0	894			143		
912	Artificial	CFG_FUNC_ENTRY					911					
913	Artificial	CFG_FUNC_EXIT					911					
914	AST	string		122	"{closure}"	0	911					
915	AST	NULL		122		1	911					
916	AST	AST_PARAM_LIST		122	"resolve, reject"	2	911			143		
917	AST	AST_PARAM		122	"resolve"	0	911					
918	AST	NULL		122	"any"	0	911					
919	AST	string		122	"resolve"	1	911			122		
920	AST	NULL		122	"any"	2	911					
921	AST	AST_PARAM		122	"reject"	1	911					
922	AST	NULL		122	"any"	0	911					
923	AST	string		122	"reject"	1	911			122		
924	AST	NULL		122	"any"	2	911					
925	AST	NULL		122		3	911					
926	AST	AST_STMT_LIST		122		4	911			143		
927	AST	AST_ASSIGN		123	"initiatedEventData = {                        state: \"initiated\"                    }"	0	911			125		
928	AST	AST_VAR	JS_DECL_VAR	123		0	911			123		
929	AST	string		123	"initiatedEventData"	0	911			123	initiatedEventData	
930	AST	AST_ARRAY	JS_OBJECT	123		1	911			125		
931	AST	AST_ARRAY_ELEM		124		0	911			124		
932	AST	string		124	"initiated"	0	911			124		
933	AST	string		124	"state"	1	911			124		
934	AST	AST_METHOD_CALL		126	"ask.apps.ul.fireCEUninstallEvent(config.buildVars.unifiedLoggingUrl, initiatedEventData, config)"	1	911			126		
935	AST	AST_PROP		126	"ask.apps.ul"	0	911			126		
936	AST	AST_PROP		126	"ask.apps"	0	911			126		
937	AST	AST_VAR		126		0	911			126		
938	AST	string		126	"ask"	0	911			126	ask	
939	AST	string		126	"apps"	1	911			126		
940	AST	string		126	"ul"	1	911			126		
941	AST	string		126	"fireCEUninstallEvent"	1	911			126		
942	AST	AST_ARG_LIST		126	"(config.buildVars.unifiedLoggingUrl, initiatedEventData, config)"	2	911			126		
943	AST	AST_PROP		126	"config.buildVars.unifiedLoggingUrl"	0	911			126		
944	AST	AST_PROP		126	"config.buildVars"	0	911			126		
945	AST	AST_VAR		126		0	911			126		
946	AST	string		126	"config"	0	911			126	config	
947	AST	string		126	"buildVars"	1	911			126		
948	AST	string		126	"unifiedLoggingUrl"	1	911			126		
949	AST	AST_VAR		126		1	911			126		
950	AST	string		126	"initiatedEventData"	0	911			126	initiatedEventData	
951	AST	AST_VAR		126		2	911			126		
952	AST	string		126	"config"	0	911			126	config	
953	AST	AST_METHOD_CALL		127		2	911			142		
954	AST	AST_NEW		127	"new Promise(function (resolve, reject) { return window.setTimeout(resolve, 50); })"	0	911			127		
955	AST	AST_NAME	NAME_NOT_FQ	127		0	911			127		
956	AST	string		127	"Promise"	0	911			127		
957	AST	AST_ARG_LIST		127		1	911			127		
958	AST	AST_CLOSURE		127		0	911			127		
959	Artificial	CFG_FUNC_ENTRY					958					
960	Artificial	CFG_FUNC_EXIT					958					
961	AST	string		127	"{closure}"	0	958					
962	AST	NULL		127		1	958					
963	AST	AST_PARAM_LIST		127	"resolve, reject"	2	958			127		
964	AST	AST_PARAM		127	"resolve"	0	958					
965	AST	NULL		127	"any"	0	958					
966	AST	string		127	"resolve"	1	958			127		
967	AST	NULL		127	"any"	2	958					
968	AST	AST_PARAM		127	"reject"	1	958					
969	AST	NULL		127	"any"	0	958					
970	AST	string		127	"reject"	1	958			127		
971	AST	NULL		127	"any"	2	958					
972	AST	NULL		127		3	958					
973	AST	AST_STMT_LIST		127		4	958			127		
974	AST	AST_RETURN		127	"return window.setTimeout(resolve, 50);"	0	958			127		
975	AST	AST_METHOD_CALL		127	"window.setTimeout(resolve, 50)"	0	958			127		
976	AST	AST_VAR		127		0	958			127		
977	AST	string		127	"window"	0	958			127	window	
978	AST	string		127	"setTimeout"	1	958			127		
979	AST	AST_ARG_LIST		127	"(resolve, 50)"	2	958			127		
980	AST	AST_VAR		127		0	958			127		
981	AST	string		127	"resolve"	0	958			127	resolve	
982	AST	integer		127	"50"	1	958			127		
983	AST	NULL		127		5	958					
984	AST	NULL		127		6	958					
985	AST	string		127	"then"	1	911			127		
986	AST	AST_ARG_LIST		127		2	911			142		
987	AST	AST_CLOSURE		127		0	911			142		
988	Artificial	CFG_FUNC_ENTRY					987					
989	Artificial	CFG_FUNC_EXIT					987					
990	AST	string		127	"{closure}"	0	987					
991	AST	NULL		127		1	987					
992	AST	AST_PARAM_LIST		127		2	987			142		
993	AST	NULL		127		3	987					
994	AST	AST_STMT_LIST		127		4	987			142		
995	AST	AST_TRY		128		0	987			141		
996	AST	AST_STMT_LIST		128		0	987			133		
997	AST	AST_ASSIGN		129	"result = chrome.management.uninstallSelf(options)"	0	987			129		
998	AST	AST_VAR	JS_DECL_VAR	129		0	987			129		
999	AST	string		129	"result"	0	987			129	result	
1000	AST	AST_METHOD_CALL		129	"chrome.management.uninstallSelf(options)"	1	987			129		
1001	AST	AST_PROP		129	"chrome.management"	0	987			129		
1002	AST	AST_VAR		129		0	987			129		
1003	AST	string		129	"chrome"	0	987			129	chrome	
1004	AST	string		129	"management"	1	987			129		
1005	AST	string		129	"uninstallSelf"	1	987			129		
1006	AST	AST_ARG_LIST		129	"(options)"	2	987			129		
1007	AST	AST_VAR		129		0	987			129		
1008	AST	string		129	"options"	0	987			129	options	
1009	AST	AST_IF		130		1	987			132		
1010	AST	AST_IF_ELEM		130		0	987			132		
1011	AST	AST_VAR		130		0	987			130		
1012	AST	string		130	"result"	0	987			130	result	
1013	AST	AST_STMT_LIST		130		1	987			132		
1014	AST	AST_RETURN		131	"return result.catch(reject);"	0	987			131		
1015	AST	AST_METHOD_CALL		131	"result.catch(reject)"	0	987			131		
1016	AST	AST_VAR		131		0	987			131		
1017	AST	string		131	"result"	0	987			131	result	
1018	AST	string		131	"catch"	1	987			131		
1019	AST	AST_ARG_LIST		131	"(reject)"	2	987			131		
1020	AST	AST_VAR		131		0	987			131		
1021	AST	string		131	"reject"	0	987			131	reject	
1022	AST	AST_CATCH_LIST		128		1	987			141		
1023	AST	AST_CATCH		134		0	987			141		
1024	AST	AST_NAME_LIST		134		0	987			141		
1025	AST	AST_NAME	NAME_NOT_FQ	134		0	987			141		
1026	AST	string		134	"Exception"	0	987			141		
1027	AST	AST_VAR		134		1	987			134		
1028	AST	string		134	"ex"	0	987			134	ex	
1029	AST	AST_STMT_LIST		134		2	987			141		
1030	AST	AST_ASSIGN		135	"exceptionEventData = {                                state: \"exception\",                                message: ex.message                            }"	0	987			138		
1031	AST	AST_VAR	JS_DECL_VAR	135		0	987			135		
1032	AST	string		135	"exceptionEventData"	0	987			135	exceptionEventData	
1033	AST	AST_ARRAY	JS_OBJECT	135		1	987			138		
1034	AST	AST_ARRAY_ELEM		136		0	987			136		
1035	AST	string		136	"exception"	0	987			136		
1036	AST	string		136	"state"	1	987			136		
1037	AST	AST_ARRAY_ELEM		137		1	987			137		
1038	AST	AST_PROP		137	"ex.message"	0	987			137		
1039	AST	AST_VAR		137		0	987			137		
1040	AST	string		137	"ex"	0	987			137	ex	
1041	AST	string		137	"message"	1	987			137		
1042	AST	string		137	"message"	1	987			137		
1043	AST	AST_METHOD_CALL		139	"ask.apps.ul.fireCEUninstallEvent(config.buildVars.unifiedLoggingUrl, exceptionEventData, config)"	1	987			139		
1044	AST	AST_PROP		139	"ask.apps.ul"	0	987			139		
1045	AST	AST_PROP		139	"ask.apps"	0	987			139		
1046	AST	AST_VAR		139		0	987			139		
1047	AST	string		139	"ask"	0	987			139	ask	
1048	AST	string		139	"apps"	1	987			139		
1049	AST	string		139	"ul"	1	987			139		
1050	AST	string		139	"fireCEUninstallEvent"	1	987			139		
1051	AST	AST_ARG_LIST		139	"(config.buildVars.unifiedLoggingUrl, exceptionEventData, config)"	2	987			139		
1052	AST	AST_PROP		139	"config.buildVars.unifiedLoggingUrl"	0	987			139		
1053	AST	AST_PROP		139	"config.buildVars"	0	987			139		
1054	AST	AST_VAR		139		0	987			139		
1055	AST	string		139	"config"	0	987			139	config	
1056	AST	string		139	"buildVars"	1	987			139		
1057	AST	string		139	"unifiedLoggingUrl"	1	987			139		
1058	AST	AST_VAR		139		1	987			139		
1059	AST	string		139	"exceptionEventData"	0	987			139	exceptionEventData	
1060	AST	AST_VAR		139		2	987			139		
1061	AST	string		139	"config"	0	987			139	config	
1062	AST	AST_RETURN		140	"return reject(ex);"	2	987			140		
1063	AST	AST_CALL		140	"reject(ex)"	0	987			140		
1064	AST	AST_NAME	NAME_NOT_FQ	140		0	987			140		
1065	AST	string		140	"reject"	0	987			140		
1066	AST	AST_ARG_LIST		140	"(ex)"	1	987			140		
1067	AST	AST_VAR		140		0	987			140		
1068	AST	string		140	"ex"	0	987			140	ex	
1070	AST	NULL		127		5	987					
1071	AST	NULL		127		6	987					
1072	AST	NULL		122		5	911					
1073	AST	NULL		122		6	911					
1074	AST	NULL		121		5	894					
1075	AST	NULL		121		6	894					
1076	AST	string		121	"uninstall"	1	9			121		
1077	AST	string		97	"management"	1	9			97		
1078	AST	AST_ARRAY_ELEM		146		1	9			163		
1079	AST	AST_ARRAY	JS_OBJECT	146		0	9			163		
1080	AST	AST_ARRAY_ELEM		147		0	9			149		
1081	AST	AST_CLOSURE		147		0	9			149		
1082	Artificial	CFG_FUNC_ENTRY					1081					
1083	Artificial	CFG_FUNC_EXIT					1081					
1084	AST	string		147	"{closure}"	0	1081					
1085	AST	NULL		147		1	1081					
1086	AST	AST_PARAM_LIST		147		2	1081			149		
1087	AST	NULL		147		3	1081					
1088	AST	AST_STMT_LIST		147		4	1081			149		
1089	AST	AST_RETURN		148	"return Promise.reject('Not implemented');"	0	1081			148		
1090	AST	AST_METHOD_CALL		148	"Promise.reject('Not implemented')"	0	1081			148		
1091	AST	AST_VAR		148		0	1081			148		
1092	AST	string		148	"Promise"	0	1081			148	Promise	
1093	AST	string		148	"reject"	1	1081			148		
1094	AST	AST_ARG_LIST		148	"('Not implemented')"	2	1081			148		
1095	AST	string		148	"Not implemented"	0	1081			148		
1096	AST	NULL		147		5	1081					
1097	AST	NULL		147		6	1081					
1098	AST	string		147	"favoriteSites"	1	9			147		
1099	AST	AST_ARRAY_ELEM		150		1	9			159		
1100	AST	AST_CLOSURE		150		0	9			159		
1101	Artificial	CFG_FUNC_ENTRY					1100					
1102	Artificial	CFG_FUNC_EXIT					1100					
1103	AST	string		150	"{closure}"	0	1100					
1104	AST	NULL		150		1	1100					
1105	AST	AST_PARAM_LIST		150		2	1100			159		
1106	AST	NULL		150		3	1100					
1107	AST	AST_STMT_LIST		150		4	1100			159		
1108	AST	AST_RETURN		151	"return new Promise(function (resolve) {                    try {                        chrome.topSites.get(function (mostVisitedUrls) { resolve({ data: mostVisitedUrls }); });                    }                    catch (ex) {                        return resolve({ data: null, error: ex });                    }                });"	0	1100			158		
1109	AST	AST_NEW		151		0	1100			158		
1110	AST	AST_NAME	NAME_NOT_FQ	151		0	1100			158		
1111	AST	string		151	"Promise"	0	1100			151		
1112	AST	AST_ARG_LIST		151		1	1100			158		
1113	AST	AST_CLOSURE		151		0	1100			158		
1114	Artificial	CFG_FUNC_ENTRY					1113					
1115	Artificial	CFG_FUNC_EXIT					1113					
1116	AST	string		151	"{closure}"	0	1113					
1117	AST	NULL		151		1	1113					
1118	AST	AST_PARAM_LIST		151	"resolve"	2	1113			158		
1119	AST	AST_PARAM		151	"resolve"	0	1113					
1120	AST	NULL		151	"any"	0	1113					
1121	AST	string		151	"resolve"	1	1113			151		
1122	AST	NULL		151	"any"	2	1113					
1123	AST	NULL		151		3	1113					
1124	AST	AST_STMT_LIST		151		4	1113			158		
1125	AST	AST_TRY		152		0	1113			157		
1126	AST	AST_STMT_LIST		152		0	1113			154		
1127	AST	AST_METHOD_CALL		153	"chrome.topSites.get(function (mostVisitedUrls) { resolve({ data: mostVisitedUrls }); })"	0	1113			153		
1128	AST	AST_PROP		153	"chrome.topSites"	0	1113			153		
1129	AST	AST_VAR		153		0	1113			153		
1130	AST	string		153	"chrome"	0	1113			153	chrome	
1131	AST	string		153	"topSites"	1	1113			153		
1132	AST	string		153	"get"	1	1113			153		
1133	AST	AST_ARG_LIST		153		2	1113			153		
1134	AST	AST_CLOSURE		153		0	1113			153		
1135	Artificial	CFG_FUNC_ENTRY					1134					
1136	Artificial	CFG_FUNC_EXIT					1134					
1137	AST	string		153	"{closure}"	0	1134					
1138	AST	NULL		153		1	1134					
1139	AST	AST_PARAM_LIST		153	"mostVisitedUrls"	2	1134			153		
1140	AST	AST_PARAM		153	"mostVisitedUrls"	0	1134					
1141	AST	NULL		153	"any"	0	1134					
1142	AST	string		153	"mostVisitedUrls"	1	1134			153		
1143	AST	NULL		153	"any"	2	1134					
1144	AST	NULL		153		3	1134					
1145	AST	AST_STMT_LIST		153		4	1134			153		
1146	AST	AST_CALL		153	"resolve({ data: mostVisitedUrls })"	0	1134			153		
1147	AST	AST_NAME	NAME_NOT_FQ	153		0	1134			153		
1148	AST	string		153	"resolve"	0	1134			153		
1149	AST	AST_ARG_LIST		153	"({ data: mostVisitedUrls })"	1	1134			153		
1150	AST	AST_ARRAY	JS_OBJECT	153		0	1134			153		
1151	AST	AST_ARRAY_ELEM		153		0	1134			153		
1152	AST	AST_VAR		153		0	1134			153		
1153	AST	string		153	"mostVisitedUrls"	0	1134			153	mostVisitedUrls	
1154	AST	string		153	"data"	1	1134			153		
1155	AST	NULL		153		5	1134					
1156	AST	NULL		153		6	1134					
1157	AST	AST_CATCH_LIST		152		1	1113			157		
1158	AST	AST_CATCH		155		0	1113			157		
1159	AST	AST_NAME_LIST		155		0	1113			157		
1160	AST	AST_NAME	NAME_NOT_FQ	155		0	1113			157		
1161	AST	string		155	"Exception"	0	1113			157		
1162	AST	AST_VAR		155		1	1113			155		
1163	AST	string		155	"ex"	0	1113			155	ex	
1164	AST	AST_STMT_LIST		155		2	1113			157		
1165	AST	AST_RETURN		156	"return resolve({ data: null, error: ex });"	0	1113			156		
1166	AST	AST_CALL		156	"resolve({ data: null, error: ex })"	0	1113			156		
1167	AST	AST_NAME	NAME_NOT_FQ	156		0	1113			156		
1168	AST	string		156	"resolve"	0	1113			156		
1169	AST	AST_ARG_LIST		156	"({ data: null, error: ex })"	1	1113			156		
1170	AST	AST_ARRAY	JS_OBJECT	156		0	1113			156		
1171	AST	AST_ARRAY_ELEM		156		0	1113			156		
1172	AST	AST_CONST		156	"null"	0	1113					
1173	AST	AST_NAME	NAME_NOT_FQ	156	"null"	0	1113					
1174	AST	string		156	"null"	0	1113					
1175	AST	string		156	"data"	1	1113			156		
1176	AST	AST_ARRAY_ELEM		156		1	1113			156		
1177	AST	AST_VAR		156		0	1113			156		
1178	AST	string		156	"ex"	0	1113			156	ex	
1179	AST	string		156	"error"	1	1113			156		
1181	AST	NULL		151		5	1113					
1182	AST	NULL		151		6	1113					
1183	AST	NULL		150		5	1100					
1184	AST	NULL		150		6	1100					
1185	AST	string		150	"mostVisitedSites"	1	9			150		
1186	AST	AST_ARRAY_ELEM		160		2	9			162		
1187	AST	AST_CLOSURE		160		0	9			162		
1188	Artificial	CFG_FUNC_ENTRY					1187					
1189	Artificial	CFG_FUNC_EXIT					1187					
1190	AST	string		160	"{closure}"	0	1187					
1191	AST	NULL		160		1	1187					
1192	AST	AST_PARAM_LIST		160		2	1187			162		
1193	AST	NULL		160		3	1187					
1194	AST	AST_STMT_LIST		160		4	1187			162		
1195	AST	AST_RETURN		161	"return Promise.reject('Not implemented');"	0	1187			161		
1196	AST	AST_METHOD_CALL		161	"Promise.reject('Not implemented')"	0	1187			161		
1197	AST	AST_VAR		161		0	1187			161		
1198	AST	string		161	"Promise"	0	1187			161	Promise	
1199	AST	string		161	"reject"	1	1187			161		
1200	AST	AST_ARG_LIST		161	"('Not implemented')"	2	1187			161		
1201	AST	string		161	"Not implemented"	0	1187			161		
1202	AST	NULL		160		5	1187					
1203	AST	NULL		160		6	1187					
1204	AST	string		160	"history"	1	9			160		
1205	AST	string		146	"browsingData"	1	9			146		
1206	AST	AST_ARRAY_ELEM		164		2	9			206		
1207	AST	AST_ARRAY	JS_OBJECT	164		0	9			206		
1208	AST	AST_ARRAY_ELEM		165		0	9			185		
1209	AST	AST_CLOSURE		165		0	9			185		
1210	Artificial	CFG_FUNC_ENTRY					1209					
1211	Artificial	CFG_FUNC_EXIT					1209					
1212	AST	string		165	"{closure}"	0	1209					
1213	AST	NULL		165		1	1209					
1214	AST	AST_PARAM_LIST		165	"options"	2	1209			185		
1215	AST	AST_PARAM		165	"options"	0	1209					
1216	AST	NULL		165	"any"	0	1209					
1217	AST	string		165	"options"	1	1209			165		
1218	AST	NULL		165	"any"	2	1209					
1219	AST	NULL		165		3	1209					
1220	AST	AST_STMT_LIST		165		4	1209			185		
1221	AST	AST_ASSIGN		166	"uri = String(options.uri)"	0	1209			166		
1222	AST	AST_VAR	JS_DECL_VAR	166		0	1209			166		
1223	AST	string		166	"uri"	0	1209			166	uri	
1224	AST	AST_CALL		166	"String(options.uri)"	1	1209			166		
1225	AST	AST_NAME	NAME_NOT_FQ	166		0	1209			166		
1226	AST	string		166	"String"	0	1209			166		
1227	AST	AST_ARG_LIST		166	"(options.uri)"	1	1209			166		
1228	AST	AST_PROP		166	"options.uri"	0	1209			166		
1229	AST	AST_VAR		166		0	1209			166		
1230	AST	string		166	"options"	0	1209			166	options	
1231	AST	string		166	"uri"	1	1209			166		
1232	AST	AST_ASSIGN		167	"_a = uri.split('/')"	1	1209			167		
1233	AST	AST_VAR	JS_DECL_VAR	167		0	1209			167		
1234	AST	string		167	"_a"	0	1209			167	_a	
1235	AST	AST_METHOD_CALL		167	"uri.split('/')"	1	1209			167		
1236	AST	AST_VAR		167		0	1209			167		
1237	AST	string		167	"uri"	0	1209			167	uri	
1238	AST	string		167	"split"	1	1209			167		
1239	AST	AST_ARG_LIST		167	"('/')"	2	1209			167		
1240	AST	string		167	"/"	0	1209			167		
1241	AST	AST_ASSIGN		167	"id = _a[0]"	2	1209			167		
1242	AST	AST_VAR	JS_DECL_VAR	167		0	1209			167		
1243	AST	string		167	"id"	0	1209			167	id	
1244	AST	AST_DIM		167	"_a[0]"	1	1209			167		
1245	AST	AST_VAR		167		0	1209			167		
1246	AST	string		167	"_a"	0	1209			167	_a	
1247	AST	integer		167	"0"	1	1209			167		
1248	AST	AST_ASSIGN		167	"app = _a[1]"	3	1209			167		
1249	AST	AST_VAR	JS_DECL_VAR	167		0	1209			167		
1250	AST	string		167	"app"	0	1209			167	app	
1251	AST	AST_DIM		167	"_a[1]"	1	1209			167		
1252	AST	AST_VAR		167		0	1209			167		
1253	AST	string		167	"_a"	0	1209			167	_a	
1254	AST	integer		167	"1"	1	1209			167		
1255	AST	AST_ASSIGN		167	"executableName = _a[2]"	4	1209			167		
1256	AST	AST_VAR	JS_DECL_VAR	167		0	1209			167		
1257	AST	string		167	"executableName"	0	1209			167	executableName	
1258	AST	AST_DIM		167	"_a[2]"	1	1209			167		
1259	AST	AST_VAR		167		0	1209			167		
1260	AST	string		167	"_a"	0	1209			167	_a	
1261	AST	integer		167	"2"	1	1209			167		
1262	AST	AST_ASSIGN		168	"exec = findExecutable(config.widgets || [], id, executableName)"	5	1209			168		
1263	AST	AST_VAR	JS_DECL_VAR	168		0	1209			168		
1264	AST	string		168	"exec"	0	1209			168	exec	
1265	AST	AST_CALL		168	"findExecutable(config.widgets || [], id, executableName)"	1	1209			168		
1266	AST	AST_NAME	NAME_NOT_FQ	168		0	1209			168		
1267	AST	string		168	"findExecutable"	0	1209			168		
1268	AST	AST_ARG_LIST		168	"(config.widgets || [], id, executableName)"	1	1209			168		
1269	AST	AST_BINARY_OP	BINARY_BOOL_OR	168	"config.widgets || []"	0	1209			168		
1270	AST	AST_PROP		168	"config.widgets"	0	1209			168		
1271	AST	AST_VAR		168		0	1209			168		
1272	AST	string		168	"config"	0	1209			168	config	
1273	AST	string		168	"widgets"	1	1209			168		
1274	AST	AST_ARRAY	JS_ARRAY	168	"[]"	1	1209			168		
1275	AST	AST_VAR		168		1	1209			168		
1276	AST	string		168	"id"	0	1209			168	id	
1277	AST	AST_VAR		168		2	1209			168		
1278	AST	string		168	"executableName"	0	1209			168	executableName	
1279	AST	AST_IF		169		6	1209			183		
1280	AST	AST_IF_ELEM		169		0	1209			183		
1281	AST	AST_VAR		169		0	1209			169		
1282	AST	string		169	"exec"	0	1209			169	exec	
1283	AST	AST_STMT_LIST		169		1	1209			183		
1284	AST	AST_ASSIGN		170	"request_1 = {                        Service: 'sendLaunchExe',                        RequestID: 1,                        ProviderID: '1',                        Inputs: {                            url: exec.widget.basepath + 'manifest.json',                            template: executableName,                            commandLine: options.params                        }                    }"	0	1209			179		
1285	AST	AST_VAR	JS_DECL_VAR	170		0	1209			170		
1286	AST	string		170	"request_1"	0	1209			170	request_1	
1287	AST	AST_ARRAY	JS_OBJECT	170		1	1209			179		
1288	AST	AST_ARRAY_ELEM		171		0	1209			171		
1289	AST	string		171	"sendLaunchExe"	0	1209			171		
1290	AST	string		171	"Service"	1	1209			171		
1291	AST	AST_ARRAY_ELEM		172		1	1209			172		
1292	AST	integer		172	"1"	0	1209			172		
1293	AST	string		172	"RequestID"	1	1209			172		
1294	AST	AST_ARRAY_ELEM		173		2	1209			173		
1295	AST	string		173	"1"	0	1209			173		
1296	AST	string		173	"ProviderID"	1	1209			173		
1297	AST	AST_ARRAY_ELEM		174		3	1209			178		
1298	AST	AST_ARRAY	JS_OBJECT	174		0	1209			178		
1299	AST	AST_ARRAY_ELEM		175		0	1209			175		
1300	AST	AST_BINARY_OP	BINARY_ADD	175	"exec.widget.basepath + 'manifest.json'"	0	1209			175		
1301	AST	AST_PROP		175	"exec.widget.basepath"	0	1209			175		
1302	AST	AST_PROP		175	"exec.widget"	0	1209			175		
1303	AST	AST_VAR		175		0	1209			175		
1304	AST	string		175	"exec"	0	1209			175	exec	
1305	AST	string		175	"widget"	1	1209			175		
1306	AST	string		175	"basepath"	1	1209			175		
1307	AST	string		175	"manifest.json"	1	1209			175		
1308	AST	string		175	"url"	1	1209			175		
1309	AST	AST_ARRAY_ELEM		176		1	1209			176		
1310	AST	AST_VAR		176		0	1209			176		
1311	AST	string		176	"executableName"	0	1209			176	executableName	
1312	AST	string		176	"template"	1	1209			176		
1313	AST	AST_ARRAY_ELEM		177		2	1209			177		
1314	AST	AST_PROP		177	"options.params"	0	1209			177		
1315	AST	AST_VAR		177		0	1209			177		
1316	AST	string		177	"options"	0	1209			177	options	
1317	AST	string		177	"params"	1	1209			177		
1318	AST	string		177	"commandLine"	1	1209			177		
1319	AST	string		174	"Inputs"	1	1209			174		
1320	AST	AST_RETURN		180	"return sendCswRequest(request_1).then(function (response) {                        return handleCswResponse(response, request_1, exec);                    });"	1	1209			182		
1321	AST	AST_METHOD_CALL		180		0	1209			182		
1322	AST	AST_CALL		180	"sendCswRequest(request_1)"	0	1209			180		
1323	AST	AST_NAME	NAME_NOT_FQ	180		0	1209			180		
1324	AST	string		180	"sendCswRequest"	0	1209			180		
1325	AST	AST_ARG_LIST		180	"(request_1)"	1	1209			180		
1326	AST	AST_VAR		180		0	1209			180		
1327	AST	string		180	"request_1"	0	1209			180	request_1	
1328	AST	string		180	"then"	1	1209			180		
1329	AST	AST_ARG_LIST		180		2	1209			182		
1330	AST	AST_CLOSURE		180		0	1209			182		
1331	Artificial	CFG_FUNC_ENTRY					1330					
1332	Artificial	CFG_FUNC_EXIT					1330					
1333	AST	string		180	"{closure}"	0	1330					
1334	AST	NULL		180		1	1330					
1335	AST	AST_PARAM_LIST		180	"response"	2	1330			182		
1336	AST	AST_PARAM		180	"response"	0	1330					
1337	AST	NULL		180	"any"	0	1330					
1338	AST	string		180	"response"	1	1330			180		
1339	AST	NULL		180	"any"	2	1330					
1340	AST	NULL		180		3	1330					
1341	AST	AST_STMT_LIST		180		4	1330			182		
1342	AST	AST_RETURN		181	"return handleCswResponse(response, request_1, exec);"	0	1330			181		
1343	AST	AST_CALL		181	"handleCswResponse(response, request_1, exec)"	0	1330			181		
1344	AST	AST_NAME	NAME_NOT_FQ	181		0	1330			181		
1345	AST	string		181	"handleCswResponse"	0	1330			181		
1346	AST	AST_ARG_LIST		181	"(response, request_1, exec)"	1	1330			181		
1347	AST	AST_VAR		181		0	1330			181		
1348	AST	string		181	"response"	0	1330			181	response	
1349	AST	AST_VAR		181		1	1330			181		
1350	AST	string		181	"request_1"	0	1330			181	request_1	
1351	AST	AST_VAR		181		2	1330			181		
1352	AST	string		181	"exec"	0	1330			181	exec	
1353	AST	NULL		180		5	1330					
1354	AST	NULL		180		6	1330					
1355	AST	AST_RETURN		184	"return Promise.resolve({ data: null, error: { message: \"Invalid request \\\"\" + uri + \"\\\"\" } });"	7	1209			184		
1356	AST	AST_METHOD_CALL		184	"Promise.resolve({ data: null, error: { message: \"Invalid request \\\"\" + uri + \"\\\"\" } })"	0	1209			184		
1357	AST	AST_VAR		184		0	1209			184		
1358	AST	string		184	"Promise"	0	1209			184	Promise	
1359	AST	string		184	"resolve"	1	1209			184		
1360	AST	AST_ARG_LIST		184	"({ data: null, error: { message: \"Invalid request \\\"\" + uri + \"\\\"\" } })"	2	1209			184		
1361	AST	AST_ARRAY	JS_OBJECT	184		0	1209			184		
1362	AST	AST_ARRAY_ELEM		184		0	1209			184		
1363	AST	AST_CONST		184	"null"	0	1209					
1364	AST	AST_NAME	NAME_NOT_FQ	184	"null"	0	1209					
1365	AST	string		184	"null"	0	1209					
1366	AST	string		184	"data"	1	1209			184		
1367	AST	AST_ARRAY_ELEM		184		1	1209			184		
1368	AST	AST_ARRAY	JS_OBJECT	184		0	1209			184		
1369	AST	AST_ARRAY_ELEM		184		0	1209			184		
1370	AST	AST_BINARY_OP	BINARY_ADD	184	"\"Invalid request \\\"\" + uri + \"\\\"\""	0	1209			184		
1371	AST	AST_BINARY_OP	BINARY_ADD	184	"\"Invalid request \\\"\" + uri"	0	1209			184		
1372	AST	string		184	"Invalid request \\\""	0	1209			184		
1373	AST	AST_VAR		184		1	1209			184		
1374	AST	string		184	"uri"	0	1209			184	uri	
1375	AST	string		184	"\\\""	1	1209			184		
1376	AST	string		184	"message"	1	1209			184		
1377	AST	string		184	"error"	1	1209			184		
1378	AST	NULL		165		5	1209					
1379	AST	NULL		165		6	1209					
1380	AST	string		165	"launchExe"	1	9			165		
1381	AST	AST_ARRAY_ELEM		186		1	9			205		
1382	AST	AST_CLOSURE		186		0	9			205		
1383	Artificial	CFG_FUNC_ENTRY					1382					
1384	Artificial	CFG_FUNC_EXIT					1382					
1385	AST	string		186	"{closure}"	0	1382					
1386	AST	NULL		186		1	1382					
1387	AST	AST_PARAM_LIST		186	"options"	2	1382			205		
1388	AST	AST_PARAM		186	"options"	0	1382					
1389	AST	NULL		186	"any"	0	1382					
1390	AST	string		186	"options"	1	1382			186		
1391	AST	NULL		186	"any"	2	1382					
1392	AST	NULL		186		3	1382					
1393	AST	AST_STMT_LIST		186		4	1382			205		
1394	AST	AST_ASSIGN		187	"uri = String(options.uri)"	0	1382			187		
1395	AST	AST_VAR	JS_DECL_VAR	187		0	1382			187		
1396	AST	string		187	"uri"	0	1382			187	uri	
1397	AST	AST_CALL		187	"String(options.uri)"	1	1382			187		
1398	AST	AST_NAME	NAME_NOT_FQ	187		0	1382			187		
1399	AST	string		187	"String"	0	1382			187		
1400	AST	AST_ARG_LIST		187	"(options.uri)"	1	1382			187		
1401	AST	AST_PROP		187	"options.uri"	0	1382			187		
1402	AST	AST_VAR		187		0	1382			187		
1403	AST	string		187	"options"	0	1382			187	options	
1404	AST	string		187	"uri"	1	1382			187		
1405	AST	AST_ASSIGN		188	"_a = uri.split('/')"	1	1382			188		
1406	AST	AST_VAR	JS_DECL_VAR	188		0	1382			188		
1407	AST	string		188	"_a"	0	1382			188	_a	
1408	AST	AST_METHOD_CALL		188	"uri.split('/')"	1	1382			188		
1409	AST	AST_VAR		188		0	1382			188		
1410	AST	string		188	"uri"	0	1382			188	uri	
1411	AST	string		188	"split"	1	1382			188		
1412	AST	AST_ARG_LIST		188	"('/')"	2	1382			188		
1413	AST	string		188	"/"	0	1382			188		
1414	AST	AST_ASSIGN		188	"id = _a[0]"	2	1382			188		
1415	AST	AST_VAR	JS_DECL_VAR	188		0	1382			188		
1416	AST	string		188	"id"	0	1382			188	id	
1417	AST	AST_DIM		188	"_a[0]"	1	1382			188		
1418	AST	AST_VAR		188		0	1382			188		
1419	AST	string		188	"_a"	0	1382			188	_a	
1420	AST	integer		188	"0"	1	1382			188		
1421	AST	AST_ASSIGN		188	"app = _a[1]"	3	1382			188		
1422	AST	AST_VAR	JS_DECL_VAR	188		0	1382			188		
1423	AST	string		188	"app"	0	1382			188	app	
1424	AST	AST_DIM		188	"_a[1]"	1	1382			188		
1425	AST	AST_VAR		188		0	1382			188		
1426	AST	string		188	"_a"	0	1382			188	_a	
1427	AST	integer		188	"1"	1	1382			188		
1428	AST	AST_ASSIGN		188	"executableName = _a[2]"	4	1382			188		
1429	AST	AST_VAR	JS_DECL_VAR	188		0	1382			188		
1430	AST	string		188	"executableName"	0	1382			188	executableName	
1431	AST	AST_DIM		188	"_a[2]"	1	1382			188		
1432	AST	AST_VAR		188		0	1382			188		
1433	AST	string		188	"_a"	0	1382			188	_a	
1434	AST	integer		188	"2"	1	1382			188		
1435	AST	AST_ASSIGN		189	"exec = findExecutable(config.widgets || [], id, executableName)"	5	1382			189		
1436	AST	AST_VAR	JS_DECL_VAR	189		0	1382			189		
1437	AST	string		189	"exec"	0	1382			189	exec	
1438	AST	AST_CALL		189	"findExecutable(config.widgets || [], id, executableName)"	1	1382			189		
1439	AST	AST_NAME	NAME_NOT_FQ	189		0	1382			189		
1440	AST	string		189	"findExecutable"	0	1382			189		
1441	AST	AST_ARG_LIST		189	"(config.widgets || [], id, executableName)"	1	1382			189		
1442	AST	AST_BINARY_OP	BINARY_BOOL_OR	189	"config.widgets || []"	0	1382			189		
1443	AST	AST_PROP		189	"config.widgets"	0	1382			189		
1444	AST	AST_VAR		189		0	1382			189		
1445	AST	string		189	"config"	0	1382			189	config	
1446	AST	string		189	"widgets"	1	1382			189		
1447	AST	AST_ARRAY	JS_ARRAY	189	"[]"	1	1382			189		
1448	AST	AST_VAR		189		1	1382			189		
1449	AST	string		189	"id"	0	1382			189	id	
1450	AST	AST_VAR		189		2	1382			189		
1451	AST	string		189	"executableName"	0	1382			189	executableName	
1452	AST	AST_IF		190		6	1382			203		
1453	AST	AST_IF_ELEM		190		0	1382			203		
1454	AST	AST_VAR		190		0	1382			190		
1455	AST	string		190	"exec"	0	1382			190	exec	
1456	AST	AST_STMT_LIST		190		1	1382			203		
1457	AST	AST_ASSIGN		191	"request_2 = {                        Service: 'sendDetectExe',                        RequestID: 1,                        ProviderID: '1',                        Inputs: {                            url: exec.widget.basepath + 'manifest.json',                            template: executableName,                        }                    }"	0	1382			199		
1458	AST	AST_VAR	JS_DECL_VAR	191		0	1382			191		
1459	AST	string		191	"request_2"	0	1382			191	request_2	
1460	AST	AST_ARRAY	JS_OBJECT	191		1	1382			199		
1461	AST	AST_ARRAY_ELEM		192		0	1382			192		
1462	AST	string		192	"sendDetectExe"	0	1382			192		
1463	AST	string		192	"Service"	1	1382			192		
1464	AST	AST_ARRAY_ELEM		193		1	1382			193		
1465	AST	integer		193	"1"	0	1382			193		
1466	AST	string		193	"RequestID"	1	1382			193		
1467	AST	AST_ARRAY_ELEM		194		2	1382			194		
1468	AST	string		194	"1"	0	1382			194		
1469	AST	string		194	"ProviderID"	1	1382			194		
1470	AST	AST_ARRAY_ELEM		195		3	1382			198		
1471	AST	AST_ARRAY	JS_OBJECT	195		0	1382			198		
1472	AST	AST_ARRAY_ELEM		196		0	1382			196		
1473	AST	AST_BINARY_OP	BINARY_ADD	196	"exec.widget.basepath + 'manifest.json'"	0	1382			196		
1474	AST	AST_PROP		196	"exec.widget.basepath"	0	1382			196		
1475	AST	AST_PROP		196	"exec.widget"	0	1382			196		
1476	AST	AST_VAR		196		0	1382			196		
1477	AST	string		196	"exec"	0	1382			196	exec	
1478	AST	string		196	"widget"	1	1382			196		
1479	AST	string		196	"basepath"	1	1382			196		
1480	AST	string		196	"manifest.json"	1	1382			196		
1481	AST	string		196	"url"	1	1382			196		
1482	AST	AST_ARRAY_ELEM		197		1	1382			197		
1483	AST	AST_VAR		197		0	1382			197		
1484	AST	string		197	"executableName"	0	1382			197	executableName	
1485	AST	string		197	"template"	1	1382			197		
1486	AST	string		195	"Inputs"	1	1382			195		
1487	AST	AST_RETURN		200	"return sendCswRequest(request_2).then(function (response) {                        return handleCswResponse(response, request_2, exec);                    });"	1	1382			202		
1488	AST	AST_METHOD_CALL		200		0	1382			202		
1489	AST	AST_CALL		200	"sendCswRequest(request_2)"	0	1382			200		
1490	AST	AST_NAME	NAME_NOT_FQ	200		0	1382			200		
1491	AST	string		200	"sendCswRequest"	0	1382			200		
1492	AST	AST_ARG_LIST		200	"(request_2)"	1	1382			200		
1493	AST	AST_VAR		200		0	1382			200		
1494	AST	string		200	"request_2"	0	1382			200	request_2	
1495	AST	string		200	"then"	1	1382			200		
1496	AST	AST_ARG_LIST		200		2	1382			202		
1497	AST	AST_CLOSURE		200		0	1382			202		
1498	Artificial	CFG_FUNC_ENTRY					1497					
1499	Artificial	CFG_FUNC_EXIT					1497					
1500	AST	string		200	"{closure}"	0	1497					
1501	AST	NULL		200		1	1497					
1502	AST	AST_PARAM_LIST		200	"response"	2	1497			202		
1503	AST	AST_PARAM		200	"response"	0	1497					
1504	AST	NULL		200	"any"	0	1497					
1505	AST	string		200	"response"	1	1497			200		
1506	AST	NULL		200	"any"	2	1497					
1507	AST	NULL		200		3	1497					
1508	AST	AST_STMT_LIST		200		4	1497			202		
1509	AST	AST_RETURN		201	"return handleCswResponse(response, request_2, exec);"	0	1497			201		
1510	AST	AST_CALL		201	"handleCswResponse(response, request_2, exec)"	0	1497			201		
1511	AST	AST_NAME	NAME_NOT_FQ	201		0	1497			201		
1512	AST	string		201	"handleCswResponse"	0	1497			201		
1513	AST	AST_ARG_LIST		201	"(response, request_2, exec)"	1	1497			201		
1514	AST	AST_VAR		201		0	1497			201		
1515	AST	string		201	"response"	0	1497			201	response	
1516	AST	AST_VAR		201		1	1497			201		
1517	AST	string		201	"request_2"	0	1497			201	request_2	
1518	AST	AST_VAR		201		2	1497			201		
1519	AST	string		201	"exec"	0	1497			201	exec	
1520	AST	NULL		200		5	1497					
1521	AST	NULL		200		6	1497					
1522	AST	AST_RETURN		204	"return Promise.resolve({ data: null, error: { message: \"Invalid request \\\"\" + uri + \"\\\"\" } });"	7	1382			204		
1523	AST	AST_METHOD_CALL		204	"Promise.resolve({ data: null, error: { message: \"Invalid request \\\"\" + uri + \"\\\"\" } })"	0	1382			204		
1524	AST	AST_VAR		204		0	1382			204		
1525	AST	string		204	"Promise"	0	1382			204	Promise	
1526	AST	string		204	"resolve"	1	1382			204		
1527	AST	AST_ARG_LIST		204	"({ data: null, error: { message: \"Invalid request \\\"\" + uri + \"\\\"\" } })"	2	1382			204		
1528	AST	AST_ARRAY	JS_OBJECT	204		0	1382			204		
1529	AST	AST_ARRAY_ELEM		204		0	1382			204		
1530	AST	AST_CONST		204	"null"	0	1382					
1531	AST	AST_NAME	NAME_NOT_FQ	204	"null"	0	1382					
1532	AST	string		204	"null"	0	1382					
1533	AST	string		204	"data"	1	1382			204		
1534	AST	AST_ARRAY_ELEM		204		1	1382			204		
1535	AST	AST_ARRAY	JS_OBJECT	204		0	1382			204		
1536	AST	AST_ARRAY_ELEM		204		0	1382			204		
1537	AST	AST_BINARY_OP	BINARY_ADD	204	"\"Invalid request \\\"\" + uri + \"\\\"\""	0	1382			204		
1538	AST	AST_BINARY_OP	BINARY_ADD	204	"\"Invalid request \\\"\" + uri"	0	1382			204		
1539	AST	string		204	"Invalid request \\\""	0	1382			204		
1540	AST	AST_VAR		204		1	1382			204		
1541	AST	string		204	"uri"	0	1382			204	uri	
1542	AST	string		204	"\\\""	1	1382			204		
1543	AST	string		204	"message"	1	1382			204		
1544	AST	string		204	"error"	1	1382			204		
1545	AST	NULL		186		5	1382					
1546	AST	NULL		186		6	1382					
1547	AST	string		186	"detectExe"	1	9			186		
1548	AST	string		164	"CSW"	1	9			164		
1549	AST	NULL		2		5	9					
1550	AST	NULL		2		6	9					
1551	AST	AST_ARG_LIST		2		1	1			208		
1552	AST	AST_BINARY_OP	BINARY_BOOL_OR	208	"webtooltab || (webtooltab = {})"	0	1			208		
1553	AST	AST_VAR		208		0	1			208		
1554	AST	string		208	"webtooltab"	0	1			208	webtooltab	
1555	AST	AST_ASSIGN		208	"webtooltab = {}"	1	1			208		
1556	AST	AST_VAR		208		0	1			208		
1557	AST	string		208	"webtooltab"	0	1			208	webtooltab	
1558	AST	AST_ARRAY	JS_OBJECT	208		1	1			208		
